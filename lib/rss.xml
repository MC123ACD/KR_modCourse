<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[王国保卫战修改教程]]></title><description><![CDATA[Obsidian digital garden]]></description><link>https://github.io/</link><image><url>.\https:\\github.io\lib\media\favicon.png</url><title>王国保卫战修改教程</title><link>https://github.io/</link></image><generator>Webpage HTML Export plugin for Obsidian</generator><lastBuildDate>Sun, 29 Jun 2025 06:35:15 GMT</lastBuildDate><atom:link href=".\https:\\github.io\lib\rss.xml" rel="self" type="application/rss+xml"/><pubDate>Sun, 29 Jun 2025 06:35:06 GMT</pubDate><ttl>60</ttl><dc:creator></dc:creator><item><title><![CDATA[模板]]></title><description><![CDATA[ 
 <br>使用模板（template）创建的英雄、士兵、敌人、防御塔、贴图、精灵等称为实体（entities）<br>实体创建流程见 <a data-href="1.4 函数#二、实体插入流程" href=".\https:\\github.io\第-1-章、基础\1.4-函数.html#二、实体插入流程" class="internal-link" target="_self" rel="noopener nofollow">1.4 函数 &gt; 二、实体插入流程</a><br><br>在&nbsp;all/entity_db（简称 E）返回的表中：<br><br>
<br>用于创建各种实体
<br>支持模板之间的深拷贝
<br>默认为空，后面会通过 kr/game_templates 和 all/templates 模块动态增加模板
<br><br>
<br>用于为模板增加组件
<br>默认为空，后面会通过 all/components 模块动态增加组件
<br>组件与模板都是表，这里仅为了区分两个表<br>E = {
    components = { },  -- 组件（如血量、技能）
    entities = { },    -- 实体模板（如英雄、敌人）
    -- ... 其他函数
}
<br><br><br>tt = E:register_t(模板名, 底模板)	-- 简称 RT
<br>
<br>作用：模板会派生于底模板生成新模板，也就是拥有底模板的所有键
<br>返回值：新模板的引用（可直接操作）
<br>原理：E.entities.模板名 = table.deepclone(E.entities.底模板)
<br>示例：  <br>tt = RT("hero_gerald", "hero")  -- tt 等价于 T("hero_gerald") 即 E.entities.hero_gerald
<br><br>E:add_comps(模板名, 组件， ...) -- 简称 AC
<br>
<br>作用：向模板注入多个 components 中的组件
<br>示例：  <br>AC("hero_gerald", "melee", "health")	-- 向 hero_gerald 模板增加 melee 和 health 组件
<br><br>E:get_template(模板名)	-- 简称 T
<br>
<br>原理：t = E.entities.模板名
<br>注意：需确保模板已存在（通过 RT 创建）<br><br>
<br>
避免直接操作 E.entities  

<br>使用 RT / AC / T 可确保模板创建和组件注入的规范性


<br>
避免依赖模板的实现细节（照葫芦画瓢）<br>
通过在 templates 搜索 AC / RT 的组件确认可用键，而非依赖具体模板的实现细节<br>
避免照葫芦画瓢，例如：官方在给模板内 tt.melee.attacks[1] 增加属性时没有设置伤害类型（damage_type），并不代表不能修改伤害类型，通过在 templates 搜索 AC 的 melee 组件，然后再搜索 CC 的 melee_attack 组件就可以找到伤害类型，所以我们可以用tt.melee.attacks[1].damage_type = 伤害类型 来修改（默认为物伤 DAMAGE_PHYSICAL，所以官方才不设置伤害类型）

<br><br><br>我们经常在修改模板的时候发现 melee，ranged， timed_attacks 组件，它们的用途如下<br><br>近战攻击与远程攻击我们称为基础攻击<br>拦截可以进行的远程攻击我们称为特殊远程攻击<br><br>components 内的 xxx_attack 组件都是技能类型组件<br><br>E:clone_c(技能类型组件)	-- 缩写 CC
<br>示例：<br>tt.melee.list[1] = CC("aura_attack")
<br><br>只写重要的，其他不再赘叙请自行查看<br>
<br>会将技能类型设置为 aura
<br>技能将会变为范围攻击<br>注意：需要给技能的 damage_radius 键设置范围 <br><br>只要给攻击加上 loops 与 shoot_times 或 hit_times 键并设置次数，即可实现多次攻击<br><br>根据数字决定攻击次数<br>示例：tt.melee.attaks[1].loops = 2（攻击 2 次）<br><br>根据表的键数决定近战攻击一次性的攻击次数<br>示例：tt.melee.attaks[1].hit_times = {n, fts(1)}<br>
一次性攻击 2 次，n 为秒，1 fts = 1 ÷ 30 <br><br>根据表的键数决定远程攻击一次性的攻击次数<br>示例：tt.melee.attaks[1].shoot_times = {n, fts(1)}<br>
一次性攻击 2 次]]></description><link>.\https:\\github.io\第-1-章、基础\1.1-实体.html</link><guid isPermaLink="false">第 1 章、基础/1.1 实体.md</guid><pubDate>Sun, 29 Jun 2025 00:50:31 GMT</pubDate></item><item><title><![CDATA[<strong>错误排查指南</strong>]]></title><description><![CDATA[ 
 <br><br><br>示例（以<a data-tooltip-position="top" aria-label="注意事项 > 表的索引" data-href="注意事项#表的索引" href=".\https:\\github.io\第-1-章、基础\注意事项.html#表的索引" class="internal-link" target="_self" rel="noopener nofollow">索引空值错误</a>为例）：<br>tt = RT("hero_gerald", "hero")
AC(tt, "melee", "timed_attacks", "dodge")
tt.melee.error.n = 666  -- 错误源头
<br>报错：<br>
<img alt="Pasted image 20250624161626.png" src=".\https:\\github.io\第-1-章、基础\_save\已压缩\pasted-image-20250624161626.png" style="width: 500px; max-width: 100%;"><br><br>
<br>
错误类型  

<br>attempt to index a nil value → 尝试索引不存在的键（melee 组件无 error 字段）


<br>
关键信息提取  

<br>第一行：错误文件与行号（kr3/game_templates-1.lua:2770）  
<br>Traceback：错误前的执行的代码（用于逆向分析定位根本原因）
<br>有行数，在哪个函数内，函数行数等


<br><br>控制台报错常见于实体逻辑错误，实体卡死（无法攻击/移动）<br>
<img alt="Pasted image 20250625102924.png" src=".\https:\\github.io\第-1-章、基础\_save\已压缩\pasted-image-20250625102924.png" style="width: 141px; max-width: 100%;"><br>示例（还是以索引空值错误为例）：<br>function scripts.hero_alleria.update(this, store)
    local error = this.melee.error.n  -- 错误源头
...
<br>报错：<br>
<img alt="Pasted image 20250625103109.png" src=".\https:\\github.io\第-1-章、基础\_save\已压缩\pasted-image-20250625103109.png" style="width: 1175px; max-width: 100%;">  <br><br>
<br>
错误类型  

<br>attempt to index field 'error' (a nil value) → 尝试索引不存在的键


<br>
关键信息提取  

<br>错误文件与行号：kr3/game_scripts-1.lua:1890
<br>Traceback：显示错误前的调用链（有可能什么都没有）


]]></description><link>.\https:\\github.io\第-1-章、基础\1.2-错误.html</link><guid isPermaLink="false">第 1 章、基础/1.2 错误.md</guid><pubDate>Sat, 28 Jun 2025 12:16:10 GMT</pubDate><enclosure url=".\https:\\github.io\第-1-章、基础\_save\已压缩\pasted-image-20250624161626.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;.\https:\\github.io\第-1-章、基础\_save\已压缩\pasted-image-20250624161626.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[1.3 常量]]></title><description><![CDATA[ 
 <br>all/constants 内的所有变量名义上称为 “常量”（constants）<br>
<br>名义常量：<br>
虽叫常量，实际为可修改的变量，但强制约定：

<br>允许读取引用
<br>禁止直接修改（破坏位运算逻辑）


<br><br>constants 内的常量最终基本都会转换为二进制进行位运算<br><br>二进制结果已换行处理，便于查看<br><br>只写常用的，详细请参考 all/constants <br><br><br>]]></description><link>.\https:\\github.io\第-1-章、基础\1.3-常量.html</link><guid isPermaLink="false">第 1 章、基础/1.3 常量.md</guid><pubDate>Sat, 28 Jun 2025 07:28:02 GMT</pubDate></item><item><title><![CDATA[1.4 函数]]></title><description><![CDATA[ 
 <br><br>所有基础函数都存储在 all/scripts 模块<br>
<br>后续会通过 kr/game_scripts 模块动态向 scripts 模块增加实体的各种函数
<br>all/script_utils（简称 SU）用于存储实体各种行为的函数（如近战攻击，远程攻击，技能则是直接写到实体的更新函数上）
<br>all/utils（简称 U）用于存储通用工具函数（索敌等）
<br><br><br>all/simulation 简称为 S<br><br>
<br>每逻辑帧（tick）将会执行一次驱动函数
<br>主要用于：

<br>更新逻辑时间（store.tick_ts += 1）
<br>处理实体插入与移除
<br>执行各种更新函数（update，通过协程）

<br>包括更新主函数，血量更新函数等




<br><br>
<br>时间相关的计算常用到 store.tick_ts 与 ts（时间戳）
<br>示例：<br>a = this.timed_attacks.list[1]

if store.tick_ts - a.ts &gt; a.cooldown then
	-- 造成伤害等逻辑
...
<br>表示如果当前时间与上次释放技能 a 的时间戳 之差大于冷却时间，则执行条件代码块<br>
换句话说就是上次释放技能过去的时间大于冷却时间<br><br>所有实体最终都会创建到 all/game.store.entities 表中（game.store 简称 store）<br><br>
<br>执行 E:create_entity(模板) 函数：

<br>深拷贝模板，生成独立实体表（存储实体的各种数据）
<br>分配唯一 ID
<br>返回该实体表引用
<br>此后可以通过这个引用直接修改创建的实体表（使用 ID 不好索引），比如增加目标等


<br><br>
<br>
执行 S.queue_insert_entity 函数：

<br>将实体表增加到 store.pending_inserts（待插入队列）中


<br>
通常使用 queue_insert(store, e) 函数包装

<br><br>
<br>通过帧循环驱动函数逐帧检测&nbsp;pending_inserts：

<br>如果队列非空，取出实体表（移除队列中的引用）
<br>执行&nbsp;S:insert_entity&nbsp;函数注册实体


<br><br>
<br>执行 S:insert_entity&nbsp;函数：

<br>以实体表唯一 ID 为键以&nbsp;[ID] = 实体表&nbsp;的形式插入&nbsp;store.entities


<br>注意：实体表从创建到注册从始至终都只是在操作引用，也就是同一实体表<br><br>e = E:create_entity("hero_alleria")	--创建小公主英雄实体
e.health.hp = 111	--血量设置为 111，注意：修改的是创建的完全独立的实体表

queue_insert(store, e)	--正式插入，等价于 S.queue_insert_entity(e)
<br><br><br>
<br>执行主函数协程调度函数

<br>包括更新主函数，血量更新协程调度函数等


<br><br>
<br>遍历所有实体，使其中有更新主函数（main_script.update）的实体进行下一步
<br>若实体主函数没有运行过且更新主函数没有协程，则创建更新主函数的协程
<br>若更新主函数有协程则重启协程（执行更新主函数）
<br>给更新主函数传递四个参数：协程、对应实体、store、主函数表的引用
<br>注意：更新主函数内最后必须挂起协程，若没有挂起则会卡死程序<br><br>移除流程与插入大致相同，不同的是：<br>
<br>无第一步
<br>最后会将对应 ID 键值设置为 nil
<br><br><br>
<br>通过 E:create_entity("damage") 创建伤害实体
<br>返回伤害实体表引用
<br>此后可以通过这个引用直接修改创建的实体表（使用 ID 不好索引），比如增加目标等
<br><br>
<br>
通过 table.insert(store.damage_queue, 伤害) 函数将伤害插入 store.damage_queue 

<br>
通常使用 queue_damage(store, damage) 函数包装

<br><br>d = E:create_entity("damage")	--创建伤害实体
d.damage_type = DAMAGE_TRUE	--伤害类型设置为真伤，注意：修改的是创建的完全独立的伤害实体表

queue_damage(store, d)	--正式插入伤害，等价于 table.insert(store.damage_queue, d)
<br><br>
<br>执行血量更新函数 sys.health:on_update：

<br>若伤害队列非空，遍历伤害队列，使其中没有造成伤害的伤害，进行下一步
<br>在 store 索引目标的 ID（target_id）
<br>执行 U.predict_damage 函数计算伤害大小（计算护甲与伤害类型的影响）
<br>应用伤害


<br><br>与创建实体相同，只不过在更新主函数增加条件：如果持续时间到了则移除效果（实体）<br><br><br>
<br>注意：是基础攻击不包含技能，区别见 <a data-href="1.1 实体#一 组件行为" href=".\https:\\github.io\第-1-章、基础\1.1-实体.html#一_组件行为" class="internal-link" target="_self" rel="noopener nofollow">1.1 实体 &gt; 一 组件行为</a>
<br><br><br>
<br>执行 U.attack_order 函数：

<br>遍历实体的基础攻击表（melee.attacks 或 ranged.attacks）
<br>根据以下条件排序基础攻击表
<br>返回到实体  melee.order 或 ranged.order 表（基础攻击释放顺序）


<br><br>都不相等时优先考虑根据概率排序<br><br>
<br>执行 SU.y_soldier_melee_block_and_attacks 函数：

<br>执行 SU.soldier_pick_melee_target 函数寻找进入拦截范围的近战目标

<br>返回目标


<br>无目标返回 A_NO_TARGET
<br>执行 SU.soldier_pick_melee_attack 函数遍历实体的 melee.order 表（排序在前的优先）

<br>闪避优先
<br>判断攻击是否可用：没有禁用、冷却完毕、是否到达释放条件，返回可用攻击


<br>无可用攻击返回 A_IN_COOLDOWN
<br>判断攻击类型：单次攻击、多次攻击、近战范围攻击，执行对应攻击的释放函数，攻击完毕返回 A_DONE


<br>释放攻击函数就是最基础的造成伤害与造成效果，不再赘叙<br>注意步骤内的缩进，返回值是上一层级的函数返回<br><br>
<br>
执行 SU.y_soldier_ranged_attacks 函数：

<br>执行 SU.soldier_pick_ranged_target_and_attack 函数

<br>寻找进入远程攻击范围的目标
<br>遍历实体的 ranged.order 表（排序在前的优先）
<br>判断攻击是否可用：没有禁用、冷却完毕，
<br>同时返回目标以及可用攻击，


<br>无目标返回 A_NO_TARGET
<br>无可用攻击返回 A_IN_COOLDOWN
<br>判断攻击类型：单次攻击、多次攻击，执行对应攻击的释放函数，攻击完毕返回 A_DONE


<br>
可自行调整顺序

<br><br><br>注意：闪避优先级较高，如果有闪避动画，则会打断优先级低的行为<br>流程就是简单的判断，不进行赘叙了，自行见 all/scripts.soldier_barrack.update 函数，<br>参考资料：<br><a class="auto-card-link-card" href="https://tieba.baidu.com/p/9764441850"><div class="auto-card-link-main"><div class="auto-card-link-title"></div><div class="auto-card-link-description"></div><div class="auto-card-link-host"></div></div></a>关于士兵是如何攻击的讨论 by天玑布可 -百度贴吧事情是这样的，因为今天lz很闲，偶然看到一个吧友问和刺客秒杀相关的事情，然后就真的写了很多东西和数学计算，结果最后翻开底层代码仔细看了一下发现全错!)  所以单独开一个贴，写一下士兵究竟是怎么一个攻击逻辑。也望各位引以为戒，对斩钉截铁说出的话要进行查证]]></description><link>.\https:\\github.io\第-1-章、基础\1.4-函数.html</link><guid isPermaLink="false">第 1 章、基础/1.4 函数.md</guid><pubDate>Sun, 29 Jun 2025 00:48:31 GMT</pubDate></item><item><title><![CDATA[1.5 存档]]></title><description><![CDATA[ 
 <br>存档用于存储各种英雄等级，加点，完成的成就、星星以及升级、关卡完成情况等<br>存档位置：C:\Users\你的用户名\AppData\Roaming\kingdom_rush_xxx <br>存档内就是一些简单的表，不进行赘叙<br><br><br>slot = storage:load_slot()	-- slot 就是存档的表了
<br><br>storage:save_slot(slot)
<br>强制约定：保存前要先读取存档<br>
因为这个函数会将存档直接完全替换为保存的表，所以刚开始必须先读取存档，否则存档会丢失此前保存的内容，仅有保存的内容<br>示例：<br>slot = storage:load_slot()	-- slot 接收存档的表，如果你要修改存档必须首先加载存档

slot.heroes.status.hero_gerald.xp = 2333	-- 将爵士的经验设置为 2333 点

storage:save_slot(slot) -- 保存到存档里
]]></description><link>.\https:\\github.io\第-1-章、基础\1.5-存档.html</link><guid isPermaLink="false">第 1 章、基础/1.5 存档.md</guid><pubDate>Sat, 28 Jun 2025 07:34:20 GMT</pubDate></item><item><title><![CDATA[一、修改模板]]></title><description><![CDATA[ 
 <br><br><br><br>首先使用搜索在 kr/game_templates 任意找到一个英雄模板<br>模板定义见 <a data-href="1.1 实体#模板" href=".\https:\\github.io\第-1-章、基础\1.1-实体.html#模板" class="internal-link" target="_self" rel="noopener nofollow">1.1 实体 &gt; 模板</a><br>
模板名见 <a data-href="详细数据" href=".\https:\\github.io\详细数据.html" class="internal-link" target="_self" rel="noopener nofollow">详细数据</a><br>如图即可：<br>
<img alt="Pasted image 20250626164940.png" src=".\https:\\github.io\第-1-章、基础\_save\已压缩\pasted-image-20250626164940.png" style="width: 800px; max-width: 100%;"><br><br>刚开始就是一行代码 tt = RT("hero_alleria", "hero")<br>
<br>RT 函数功能见 <a data-href="1.1 实体#1 创建模板" href=".\https:\\github.io\第-1-章、基础\1.1-实体.html#1_创建模板" class="internal-link" target="_self" rel="noopener nofollow">1.1 实体 &gt; 1 创建模板</a>
<br>了解功能后我们知道 hero_alleria 此时是以 hero 模板为底模板的<br>
我们可以通过在 all/templates 搜索 hero 模板查看其内容<br>
<img alt="Pasted image 20250628154234.png" src=".\https:\\github.io\第-1-章、基础\_save\未压缩\pasted-image-20250628154234.png" style="width: 850px; max-width: 100%;"><br>
我们发现里面没有什么东西，可以继续查找 AC（E:add_comps）函数内的 hero 组件<br>
<img alt="Pasted image 20250627102843.png" src=".\https:\\github.io\第-1-章、基础\_save\未压缩\pasted-image-20250627102843.png" style="width: 825px; max-width: 100%;"><br>
我们可以翻译一下：（什么？这么简单还要用软件翻译）<br>
<br>以最主要的两个来说：<br>
- level_stats 等级属性<br>
- skills 技能等级属性<br>
后面会通过模板向里面增加对应属性
<br><br>综上我们要修改的就是 hero.level_stats（等级属性）了<br>然后我们回到英雄模板<br>
如图（已折叠）：<br>
<img alt="Pasted image 20250626190509.png" src=".\https:\\github.io\第-1-章、基础\_save\已压缩\pasted-image-20250626190509.png" style="width: 450px; max-width: 100%;"><br>
我们可以再翻译一下：<br>
<br>第一行：armor 物理护甲
<br>第二行：hp_max 最大血量
<br>还有近战普攻、远程普攻的最大最小伤害等
<br><img alt="Pasted image 20250626191037.png" src=".\https:\\github.io\第-1-章、基础\_save\已压缩\pasted-image-20250626191037.png" style="width: 352px; max-width: 100%;"><br>
如图假如我们要修改的最大血量<br>
<br>展开我们发现有 10 行数字，其实这是行数对应等级的血量<br>
例如：修改第十行为 233，那么英雄 10 级时血量为 233 点<br>
其他等级属性同理
<br>我们将第十行血量修改为 666；保存后运行游戏（确保已配置环境，若没有见：<a data-tooltip-position="top" aria-label="发布与安装改版 > 4 如果是单个文件，则需要在窗口打开对应目录" data-href="发布与安装改版#4 如果是单个文件，则需要在窗口打开对应目录" href=".\https:\\github.io\发布与安装改版.html#4_如果是单个文件，则需要在窗口打开对应目录" class="internal-link" target="_self" rel="noopener nofollow">安装单个改版文件</a>）<br>
<img alt="Pasted image 20250626192149.png" src=".\https:\\github.io\第-1-章、基础\_save\已压缩\pasted-image-20250626192149.png" style="width: 377px; max-width: 100%;"><br>
<img alt="Pasted image 20250626191819.png" src=".\https:\\github.io\第-1-章、基础\_save\已压缩\pasted-image-20250626191819.png" style="width: 541px; max-width: 100%;"><br>
如图血量变为 666 成功<br>
<br>若未成功可以检查一下英雄等级是否到 10 级，当然也可以修改其他行只要英雄到达这个等级
<br>英雄下面还有一些移动速度，拦截范围什么的基础属性感兴趣可以自己改下<br>tt.melee.range 拦截范围，tt.motion.max_speed 移动速度<br><br>
<br>Q：程序是如何知道我们在修改哪个英雄？换句话说 tt 指的是什么
<br>A：因为 RT 函数会返回创建的模板的引用，也就是说此时 tt 就是 E.entities.hero_alleria<br>
除非重新给 tt 赋值（比如创建另一个英雄模板，然后 tt 就直接指向新模板了）
<br><br><br><br>同上 RT(英雄模板名, hero)，hero 组件有 skills（技能）<br>
<img alt="Pasted image 20250627155614.png" src=".\https:\\github.io\第-1-章、基础\_save\未压缩\pasted-image-20250627155614.png" style="width: 525px; max-width: 100%;"><br>
如图以艾莉丹为例，我们发现有很多技能<br>
<br>我们可以通过查资料来找我们要改的技能的名称，见 <a data-href="详细数据" href=".\https:\\github.io\详细数据.html" class="internal-link" target="_self" rel="noopener nofollow">详细数据</a>
<br><br>假设我们要修改艾莉丹的四技能；双刀跳斩的伤害<br>查资料（代码名称大全）发现四技能的名称是 double_strike<br>
直接在模板找就行<br>
<img alt="Pasted image 20250627185432.png" src=".\https:\\github.io\第-1-章、基础\_save\未压缩\pasted-image-20250627185432.png" style="width: 500px; max-width: 100%;"><br>
如图为双刀跳斩伤害<br>
<br>3 行数字为行数对应技能等级（技能加点）的属性<br>
例如：修改第三行最大伤害为 233 则双刀跳斩三级时最大伤害为 233 点
<br>数字可以随便填，然后同上运行游戏测试就行，不再赘叙<br><br>
<br>Q：如果我想修改冷却时间等不会随技能等级提高的属性，这里怎么没有
<br>A：因为这里只有对应技能等级的对应属性，也就是说只有随等级提高的属性才会在这里
<br>]]></description><link>.\https:\\github.io\第-1-章、基础\1.6-修改教程.html</link><guid isPermaLink="false">第 1 章、基础/1.6 修改教程.md</guid><pubDate>Sun, 29 Jun 2025 00:51:52 GMT</pubDate><enclosure url=".\https:\\github.io\第-1-章、基础\_save\已压缩\pasted-image-20250626164940.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;.\https:\\github.io\第-1-章、基础\_save\已压缩\pasted-image-20250626164940.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[拷贝的区别]]></title><description><![CDATA[ 
 <br><br>给一个变量赋值表，就是复制其引用（内存地址），除非显式（深拷贝）复制它<br><br>
<br>因为变量只相当于指针，所以无法通过直接通过修改变量来修改表
<br>例如：<br>a = {1 , 2 , 3}
a = {"a", "b", "c"}	-- 123 表不变，只是从引用 123 表改为引用 abc 表
<br><br><br>可以在方括号内填写变量，或者数字、字符串<br>
<br>示例：table[1]、table["str"]、table[a]
<br><br>
<br>仅能索引字符串
<br>示例：table.str
<br>Warning
注意：如果键 str 不存在，尝试索引子键 x 会引发索引 nil 值错误<br>
示例：table.str.x
因为表内不存在的键都是 nil ，nil 不是一个表所以不存在子键，无法索引
但是如果只是给不存在的 str 赋值，那么将会自动创建 str 键然后接收这个值
<br><br>你可能已经注意到调用函数和定义函数时的冒号了，其主要作用如下<br><br>
<br>
调用时将冒号前的一个表隐式传递

<br>调用时：E:register_t(模板名, 组件) 
<br>等价于 E.register_t(E, 模板名, 组件)


<br>
定义时隐式定义一个形式参数 self

<br>定义时：function entity_db:register_t(name, base) 
<br>等价于 function entity_db.register_t(self, name, base)


<br><br>综上使用冒号与点的区别仅在于隐式传递与隐式定义 self]]></description><link>.\https:\\github.io\第-1-章、基础\注意事项.html</link><guid isPermaLink="false">第 1 章、基础/注意事项.md</guid><pubDate>Sat, 28 Jun 2025 07:34:03 GMT</pubDate></item><item><title><![CDATA[精灵]]></title><description><![CDATA[ 
 <br>
<br>sprite.pos：精灵的位置，以左上角为原点（0， 0）
<br>sprite.draw_order：绘制顺序，可能用于覆盖Z值
<br>sprite.ignore_start：是否忽略起始时间（立即开始）
<br>animated：布尔值，是否启用动画
<br>group&nbsp;&amp;&nbsp;prefix：精灵所属资源组和前缀名，用于定位动画资源
<br>name：当前播放的动画名称（如 "idle",&nbsp;"attack"）
<br>anchor：锚点
<br>offset：位置偏移量
<br>loop &amp;&nbsp;loop_forced：是否循环播放动画。loop_forced 可能强制覆盖动画本身的循环设置
<br>flip_x：是否镜像翻转
<br>r：旋转角度
<br>scale：缩放比例
<br>alpha：透明度（0 透明 ~&nbsp;255 不透明）和显隐状态
<br>hidden： 是否隐藏精灵
<br>z：渲染层级，控制绘制顺序
<br>angles&nbsp;<br>- 用于方向性动画（如八方向角色移动）：
    
    angles = {0, 45, 90, ...}      -- 角度列表
    angles_flip_horizontal = true  -- 水平翻转时角度是否自动适配
    angles_custom = function(angle) ... end -- 自定义角度处理
<br>
<br>
fps&nbsp;&amp;&nbsp;ts

<br>帧率（nil用默认值）和时间戳（累计动画时间）。<br>



<br>
frame_idx&nbsp;&amp;&nbsp;frame_name

<br>当前帧索引（从1开始）和帧名称（若使用帧名动画）。<br>



<br>
hide_after_runs

<br>动画播放指定次数后自动隐藏（如爆炸动画播完消失）。<br>



<br><br><br>
<br>
sort_y&nbsp;&amp;&nbsp;sort_y_offset

<br>按Y轴排序精灵（模拟深度效果），sort_y_offset为排序偏移量。<br>



<br>
sync_idx&nbsp;&amp;&nbsp;sync_flag

<br>同步多个精灵的动画（如让多个对象播放相同帧）。<br>



<br>
random_ts

<br>随机起始时间，避免多个精灵动画同步播放。<br>



<br>
size_names&nbsp;&amp;&nbsp;size_scales

<br>多尺寸精灵支持（如size_names = {"sm", "lg"},&nbsp;size_scales = {0.5, 1.5}）。<br>



<br><br><br>
<br>runs: 动画已循环次数。<br>

<br>hidden_count: 隐藏计数器（用于延迟隐藏）。<br>

<br>time_offset: 时间偏移（延迟启动动画）。<br>

<br>ignore_start: 是否跳过初始帧。
]]></description><link>.\https:\\github.io\第-2-章、动画\精灵.html</link><guid isPermaLink="false">第 2 章、动画/精灵.md</guid><pubDate>Thu, 19 Jun 2025 12:15:17 GMT</pubDate></item><item><title><![CDATA[0.1 配置环境]]></title><description><![CDATA[ 
 <br>开始之前先说一下游戏的引擎版本：<br>Lua_v5.1 + Love 2d_v10.2<br>（通过 print 版本信息得到）<br><br>开始修改前建议先观看两门教程（至少需要两个小时）<br>
<br>
<a data-tooltip-position="top" aria-label="https://www.bilibili.com/video/BV1vf4y1L7Rb/" rel="noopener nofollow" class="external-link" href="https://www.bilibili.com/video/BV1vf4y1L7Rb/" target="_blank">Lua教程-入门—哔哩哔哩</a>

<br>
<a data-tooltip-position="top" aria-label="https://www.bilibili.com/video/BV1WR4y1E7ud/" rel="noopener nofollow" class="external-link" href="https://www.bilibili.com/video/BV1WR4y1E7ud/" target="_blank">Lua教程-进阶—哔哩哔哩</a>

<br><br><br><a class="auto-card-link-card" href="https://code.visualstudio.com/"><div class="auto-card-link-main"><div class="auto-card-link-title"></div><div class="auto-card-link-description"></div><div class="auto-card-link-host"><span></span></div></div></a>Visual Studio Code - Code Editing. RedefinedVisual Studio Code redefines AI-powered coding with GitHub Copilot for building and debugging modern web and cloud applications. Visual Studio Code is free and available on your favorite platform - Linux, macOS, and Windows.code.visualstudio.com<img class="auto-card-link-thumbnail" src="https://code.visualstudio.com/opengraphimg/opengraph-home.png" draggable="false"><br><br><br>如果嫌这个 Lua 扩展卡顿，可以安装图 2 的 Lua，缺点就是无中文翻译<br><br><br><img alt="Pasted image 20250617204516.png" src=".\https:\\github.io\_save\已压缩\pasted-image-20250617204516.png" style="width: 307px; max-width: 100%;"><br><br><br><br><img alt="Pasted image 20250617205212.png" src=".\https:\\github.io\_save\已压缩\pasted-image-20250617205212.png" style="width: 356px; max-width: 100%;"><br><br><br><br>图片路径仅供参考，请填写你的安装目录<br>
<img alt="Pasted image 20250618091025.png" src=".\https:\\github.io\_save\已压缩\pasted-image-20250618091025.png" style="width: 475px; max-width: 100%;"> <br><br>验证是否出现窗口，如果出现窗口则安装成功<br>
<img alt="Pasted image 20250622125753.png" src=".\https:\\github.io\_save\已压缩\pasted-image-20250622125753.png" style="width: 650px; max-width: 100%;"><br><br><br>注意：文件夹路径不要有中文<br>推荐在 D 盘新建文件夹<br><br><br>如图二所示即可<br><br><br><img alt="Pasted image 20250618125723.png" src=".\https:\\github.io\_save\已压缩\pasted-image-20250618125723.png" style="width: 700px; max-width: 100%;"><br>
注：以后修改的文件将会存在这个文件夹内<br><br><br><br><br>{
	"version": "0.2.0",
	"configurations": [
		{
			"type": "lua-local",
			"request": "launch",
			"name": "Debug",
			"program": {
				"command": "love"
			},
			"args": [
				".",
				"debug"
			]
		},
		{
			"type": "lua-local",
			"request": "launch",
			"name": "Release",
			"program": {
				"command": "love"
			},
			"args": [
				"."
			]
		}
	]
}
<br><br>if arg[2] == "debug" then
	require("lldebugger").start()
end
<br>如图即可：<br>
<img alt="Pasted image 20250618143019.png" src=".\https:\\github.io\_save\已压缩\pasted-image-20250618143019.png" style="width: 600px; max-width: 100%;"><br>反编译见 <a data-href="0.2 工具#反编译软件" href=".\https:\\github.io\0.2-工具.html#反编译软件" class="internal-link" target="_self" rel="noopener nofollow">0.2 工具 &gt; 反编译软件</a><br>注意：反编译后需要用 output 的 main 模块替换掉原 main 模块（以后反编译不再赘叙）<br>
<img alt="Pasted image 20250618134903.png" src=".\https:\\github.io\_save\已压缩\pasted-image-20250618134903.png" style="width: 700px; max-width: 100%;"><br>参考资料：<br><a class="auto-card-link-card" href="https://www.cnblogs.com/linxiaoxu/p/17653162.html"><div class="auto-card-link-main"><div class="auto-card-link-title"></div><div class="auto-card-link-description"></div><div class="auto-card-link-host"><span></span></div></div></a>[Love] VSCODE 调试 LOVE 引擎游戏 - 小能日记 - 博客园## VSCODE调试LOVE引擎游戏 ### **安装插件** ### **配置插件** 按 `CTRL + SHIFT + P`，打开`Preferences: Open User Settings (JSON)`，为settings.json添加如下代码 ```lua &amp;quot;Lua.ru<img class="auto-card-link-favicon" src="https://assets.cnblogs.com/favicon_v3_2.ico">www.cnblogs.com<br><br><br><img alt="Pasted image 20250618150508.png" src=".\https:\\github.io\_save\已压缩\pasted-image-20250618150508.png" style="width: 550px; max-width: 100%;"><br><br><br>Debug 为调试模式，会对性能造成较大影响<br>
Release 则为正常模式<br>
<img alt="Pasted image 20250618145003.png" src=".\https:\\github.io\_save\已压缩\pasted-image-20250618145003.png" style="width: 357px; max-width: 100%;"><br><br>尽量打到会立刻触发的代码上，比如 kr/game_templates 内<br>
<img alt="Pasted image 20250618143505.png" src=".\https:\\github.io\_save\已压缩\pasted-image-20250618143505.png" style="width: 625px; max-width: 100%;"><br><br>注意：运行需要打开 steam<br>
<img alt="Pasted image 20250618152216.png" src=".\https:\\github.io\_save\已压缩\pasted-image-20250618152216.png" style="width: 500px; max-width: 100%;"><br><br><img alt="Pasted image 20250618143251.png" src=".\https:\\github.io\_save\已压缩\pasted-image-20250618143251.png" style="width: 800px; max-width: 100%;"><br>完成后注意一下存档位置会在 C:\Users\你的用户名称\AppData\Roaming\LOVE 里面<br><br><br>将 console 键值改为 false<br>
<img alt="Pasted image 20250618142239.png" src=".\https:\\github.io\_save\已压缩\pasted-image-20250618142239.png" style="width: 325px; max-width: 100%;"><br><br><img alt="Pasted image 20250618161513.png" src=".\https:\\github.io\_save\已压缩\pasted-image-20250618161513.png" style="width: 600px; max-width: 100%;"><br><br><br>``<br><br>
<br>点击左上角金币图标，可以开启有 UI 的控制台（功能与快捷键相同）<br>
<img alt="Pasted image 20250620190901.png" src=".\https:\\github.io\_save\已压缩\pasted-image-20250620190901.png" style="width: 600px; max-width: 100%;">
<br><br><br><br>设置后可按 0 手动触发断点<br>
<br>断点触发后可以直接右键修改变量的值、以及在调试控制台执行代码
<br>注意：断点必须使用调试模式运行才有效<br><br>直接搜索就行<br><br>if key == "0" then
	print("Break-point")
end
<br><img alt="Pasted image 20250620203617.png" src=".\https:\\github.io\_save\已压缩\pasted-image-20250620203617.png" style="width: 550px; max-width: 100%;"><br><br>注意：只有触发断点时监视才可用<br><br><img alt="Pasted image 20250621105918.png" src=".\https:\\github.io\_save\已压缩\pasted-image-20250621105918.png" style="width: 450px; max-width: 100%;"><br><br>
<br>打开设置（左下角） 
<br>点击文本编辑器 → 字体 → 输入 JetBrains Mono （请确保已安装）
<br>]]></description><link>.\https:\\github.io\0.1-配置环境.html</link><guid isPermaLink="false">0.1 配置环境.md</guid><pubDate>Sun, 29 Jun 2025 05:40:15 GMT</pubDate><enclosure url="https://code.visualstudio.com/opengraphimg/opengraph-home.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;https://code.visualstudio.com/opengraphimg/opengraph-home.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[AI]]></title><description><![CDATA[ 
 <br><br>如有任何疑问，强烈建议先问一下 AI，然后再向他人寻求帮助。<br>先推荐一个 deep seek：<br><a class="auto-card-link-card" href="https://www.deepseek.com/"><div class="auto-card-link-main"><div class="auto-card-link-title"></div><div class="auto-card-link-description"></div><div class="auto-card-link-host"><span></span></div></div></a>DeepSeek | 深度求索我是 DeepSeek，很高兴见到你！我可以帮你写代码、读文件、写作各种创意内容，请把你的任务交给我吧~<img class="auto-card-link-favicon" src="https://www.deepseek.com/favicon.ico">www.deepseek.com<img class="auto-card-link-thumbnail" src="https://chat.deepseek.com/deepseek-chat.jpeg" draggable="false"><br>问 AI 最重要的是你想问的问题，需要先明确自己的遇到的问题。然后简单描述环境（或者直接复制上下文给 AI）<br>（不知道问题？建议把 lua 基础学会，了解一些名词）<br><br>推荐 7z<br><a class="auto-card-link-card" href="https://www.7-zip.org/"><div class="auto-card-link-main"><div class="auto-card-link-title"></div><div class="auto-card-link-host"><span></span></div></div></a>7-Zipwww.7-zip.org<img class="auto-card-link-thumbnail" src="https://www.7-zip.org/7ziplogo.png" draggable="false"><br><br><br><br>可以拖文件夹，可能会弹非常多的弹窗<br>
<img alt="Pasted image 20250615210233.png" src=".\https:\\github.io\_save\已压缩\pasted-image-20250615210233.png" style="width: 959px; max-width: 100%;"><br><br><img alt="Pasted image 20250615210312.png" src=".\https:\\github.io\_save\已压缩\pasted-image-20250615210312.png" style="width: 675px; max-width: 100%;"><br><br><br><img alt="Pasted image 20250616103143.png" src=".\https:\\github.io\_save\已压缩\pasted-image-20250616103143.png" style="width: 368px; max-width: 100%;"><br><br><img alt="Pasted image 20250625162357.png" src=".\https:\\github.io\_save\已压缩\pasted-image-20250625162357.png" style="width: 405px; max-width: 100%;">]]></description><link>.\https:\\github.io\0.2-工具.html</link><guid isPermaLink="false">0.2 工具.md</guid><pubDate>Sat, 28 Jun 2025 07:58:16 GMT</pubDate><enclosure url="https://www.deepseek.com/favicon.ico" length="0" type="image/x-icon"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;https://www.deepseek.com/favicon.ico&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[发布改版]]></title><description><![CDATA[ 
 <br><br>发布时应该仅发布修改的模块<br><br><img alt="Pasted image 20250626193110.png" src=".\https:\\github.io\_save\已压缩\pasted-image-20250626193110.png" style="width: 235px; max-width: 100%;"><br><br>all，krn，all-desktop，krn-desktop<br>
其中 n 为游戏版本，例如：一代就是 1，五代就是 5<br>
<img alt="Pasted image 20250626193245.png" src=".\https:\\github.io\_save\已压缩\pasted-image-20250626193245.png"><br><br>假设修改了 kr.game_templates 则将修改的 game_templates 放入以上文件夹内对应的文件夹（改版名.krn）<br>
<img alt="Pasted image 20250626193952.png" src=".\https:\\github.io\_save\已压缩\pasted-image-20250626193952.png" style="width: 409px; max-width: 100%;"><br><br>将改版文件夹增加到压缩包打包（任意压缩软件即可），发布即可<br>压缩软件见 <a data-href="0.2 工具#压缩软件" href=".\https:\\github.io\0.2-工具.html#压缩软件" class="internal-link" target="_self" rel="noopener nofollow">0.2 工具 &gt; 压缩软件</a><br><br><br><br><br>找到游戏目录，然后打开游戏 exe 的压缩包<br><br><br><img alt="Pasted image 20250626200756.png" src=".\https:\\github.io\_save\已压缩\pasted-image-20250626200756.png" style="width: 650px; max-width: 100%;"><br><br>]]></description><link>.\https:\\github.io\发布与安装改版.html</link><guid isPermaLink="false">发布与安装改版.md</guid><pubDate>Sat, 28 Jun 2025 08:01:13 GMT</pubDate><enclosure url=".\https:\\github.io\_save\已压缩\pasted-image-20250626193110.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;.\https:\\github.io\_save\已压缩\pasted-image-20250626193110.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[详细数据]]></title><description><![CDATA[ 
 <br><br>详细数据以及技能数据、各种模板名请查阅 @杨叔伟大无需多言 的文档：<br><a class="auto-card-link-card" href="https://www.bilibili.com/read/readlist/rl141527"><div class="auto-card-link-main"><div class="auto-card-link-title"></div><div class="auto-card-link-description"></div><div class="auto-card-link-host"><span></span></div></div></a>《王国保卫战》Kingdom Rush 中文百科全集《王国保卫战》百科系列，含有全代防御塔，英雄，敌人，天赋系统，关卡场景，关卡出怪列表等内容的详细数据及作者的解说。<img class="auto-card-link-favicon" src="https://www.bilibili.com/favicon.ico">www.bilibili.com<img class="auto-card-link-thumbnail" src="https://i1.hdslb.com/bfs/article/9f3790a8bc417f97ecf26770bb67d305248602469.jpg@234w_176h_1c.webp" draggable="false">]]></description><link>.\https:\\github.io\详细数据.html</link><guid isPermaLink="false">详细数据.md</guid><pubDate>Sat, 28 Jun 2025 06:47:02 GMT</pubDate><enclosure url="https://www.bilibili.com/favicon.ico" length="0" type="image/x-icon"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;https://www.bilibili.com/favicon.ico&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[免责声明]]></title><description><![CDATA[ 
 <br><br>该文档仅限学习交流，禁止用于商业用途<br>请购买正版游戏后再进行修改。若修改盗版出现任何问题，均与作者以及文档无关<br><br><a data-tooltip-position="top" aria-label="https://github.com/MC123ACD/KR_modCourse" rel="noopener nofollow" class="external-link" href="https://github.com/MC123ACD/KR_modCourse" target="_blank">Github</a>              <br>本文档适用于电脑版的一代、二代、三代、五代，请注意版本（安卓版部分可用）<br>由于本人正处于学习阶段，所以错误在所难免，欢迎提出意见、提 requests<br><br>鉴于网上对这个游戏的修改教程过于分散以及不系统，特地写此文档<br>看不懂文档的话可以直接先看修改教程，有不懂的再看文档]]></description><link>.\https:\\github.io\index.html</link><guid isPermaLink="false">index.md</guid><pubDate>Fri, 27 Jun 2025 06:34:06 GMT</pubDate></item></channel></rss>
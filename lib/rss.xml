<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[王国保卫战修改教程]]></title><description><![CDATA[Obsidian digital garden]]></description><link>https://github.io/</link><image><url>.\https:\\github.io\lib\media\favicon.png</url><title>王国保卫战修改教程</title><link>https://github.io/</link></image><generator>Webpage HTML Export plugin for Obsidian</generator><lastBuildDate>Thu, 26 Jun 2025 00:57:48 GMT</lastBuildDate><atom:link href=".\https:\\github.io\lib\rss.xml" rel="self" type="application/rss+xml"/><pubDate>Thu, 26 Jun 2025 00:57:43 GMT</pubDate><ttl>60</ttl><dc:creator></dc:creator><item><title><![CDATA[1.1 实体]]></title><description><![CDATA[ 
 <br>使用模板（template）创建的英雄、士兵、敌人、防御塔、贴图、精灵等称为实体（entities）<br><br>
<br>所有实体最终都会存在 all/game 的 store.entities 表中
<br><br>
<br>调用 E:create_entity(模板) 函数：

<br>深拷贝模板，生成独立实体表
<br>返回该实体表


<br><br>
<br>调用 simulation（简称 S）的 queue_insert_entity 函数：

<br>将实体表增加到 game.store.pending_inserts（待插入队列）中


<br><br>
<br>S:do_tick&nbsp;函数逐帧检测&nbsp;pending_inserts：

<br>如果队列非空，取出实体表（移除队列中的引用）
<br>调用&nbsp;S:insert_entity&nbsp;注册实体


<br><br>
<br>在&nbsp;S:insert_entity&nbsp;函数内：

<br>分配唯一 ID&nbsp;作为键
<br>将实体表以&nbsp;[ID] = 实体表&nbsp;的形式存入&nbsp;game.store.entities


<br>注意：实体表从创建到注册从始至终都只是在操作引用，而不是多次深拷贝实体表<br>
 程序运行逻辑<br><br>在&nbsp;all/entity_db（简称 E）返回的表中：<br><br>
<br>核心功能：

<br>用于创建各种实体
<br>支持模板之间的深拷贝


<br><br>
<br>核心功能：

<br>创建各种模板时会派生于组件
<br>为模板增加组件


<br>组件与模板都是表，这里只是为了区分<br><br>E = {
    components = { },  -- 组件（如血量、技能）
    entities = { },    -- 完整实体模板（如英雄、敌人）
    -- ... 其他函数
}
<br>
<br>初始状态：components 和 entities 为空，由其他模块动态填充
<br><br><br><br><br>
<br>
直接赋值  
	E.entities.hero_gerald = { ... }  -- 手动创建（不推荐）


<br>
推荐方法：E:register_t(模板名, 底表) （简称 RT）  

<br>
作用：模板会派生于底表（深拷贝）生成新模板

<br>
返回值：新模板的引用（可直接操作）

<br>
示例：  


local tt = RT("hero_gerald", "hero")  -- tt 即 E.entities.hero_gerald


<br><br>
<br>
直接操作（不推荐）：  
E.entities.hero_gerald.melee = table.deepclone(E.components.melee)


<br>
推荐方法：E:add_comps(模板名, 组件， ...) （简称 AC）  

<br>
作用：向模板注入多个 components 中的组件

<br>
限制：仅支持 components 中定义的组件

<br>
示例：  
AC("hero_gerald", "melee", "health")




<br><br>
<br>
直接索引（不推荐）：  
local tpl = E.entities.hero_gerald


<br>
推荐方法：E:get_template(模板名)  

<br>注意：需确保模板已存在（通过 RT 或 AC 创建）。


<br><br>
<br>
避免直接操作 E.entities  

<br>使用 RT / AC 可确保模板创建和组件注入的规范性


<br>
调试建议  

<br>通过在 components 搜索 AC / RT 内调用的组件确认可用键，而非依赖具体模板的实现细节


<br><br>-- 1. 创建爵士模板（深拷贝英雄组件）
tt = RT("hero_gerald", "hero")

-- 2. 添加近战技能和血量组件
AC("hero_gerald", "melee", "health")

-- 3. 索引模板，修改血量（搜索 health 组件）
E:get_template("hero_gerald").health.hp = 666
<br><br><br>详细数据以及技能数据、各种模板名请查阅 @杨叔伟大无需多言 的文档：<br><a class="auto-card-link-card" href="https://www.bilibili.com/read/readlist/rl141527"><div class="auto-card-link-main"><div class="auto-card-link-title"></div><div class="auto-card-link-description"></div><div class="auto-card-link-host"><span></span></div></div></a>《王国保卫战》Kingdom Rush 中文百科全集《王国保卫战》百科系列，含有全代防御塔，英雄，敌人，天赋系统，关卡场景，关卡出怪列表等内容的详细数据及作者的解说。<img class="auto-card-link-favicon" src="https://www.bilibili.com/favicon.ico">www.bilibili.com<img class="auto-card-link-thumbnail" src="https://i1.hdslb.com/bfs/article/9f3790a8bc417f97ecf26770bb67d305248602469.jpg@234w_176h_1c.webp" draggable="false">]]></description><link>.\https:\\github.io\第-1-章、基础\1.1-实体.html</link><guid isPermaLink="false">第 1 章、基础/1.1 实体.md</guid><pubDate>Thu, 26 Jun 2025 00:51:59 GMT</pubDate><enclosure url="https://www.bilibili.com/favicon.ico" length="0" type="image/x-icon"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;https://www.bilibili.com/favicon.ico&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[<strong>错误排查指南</strong>]]></title><description><![CDATA[ 
 <br><br><br><br>tt = RT("hero_gerald", "hero")
AC(tt, "melee", "timed_attacks", "dodge")
tt.melee.error.n = 666  -- 触发错误
<br><br><img alt="Pasted image 20250624161626.png" src=".\https:\\github.io\lib\media\pasted-image-20250624161626.png" style="width: 500px; max-width: 100%;"><br><br>
<br>错误类型  
<br>
<br>attempt to index a nil value → 尝试索引不存在的键（melee 组件无 error 字段）
<br>
<br>关键信息提取  
<br>
<br>第一行：错误文件与行号（kr3/game_templates-1.lua:2770）  
<br>Traceback：错误前的执行的代码（用于逆向分析定位根本原因）
<br><br>控制台报错常见于实体逻辑错误，实体卡死（无法攻击/移动）<br>
<img alt="Pasted image 20250625102924.png" src=".\https:\\github.io\lib\media\pasted-image-20250625102924.png" style="width: 141px; max-width: 100%;"><br><br>function scripts.hero_alleria.update(this, store)
    local error = this.melee.error.n  -- 错误源头
...
<br><br><img alt="Pasted image 20250625103109.png" src=".\https:\\github.io\lib\media\pasted-image-20250625103109.png" style="width: 1175px; max-width: 100%;">  <br><br>
<br>错误类型  
<br>
<br>attempt to index field 'error' (a nil value) → 尝试索引不存在的键
<br>
<br>关键信息提取  
<br>
<br>错误文件与行号（kr3/game_scripts-1.lua:1890）
<br>Traceback：显示错误前的调用链（有可能什么都没有）
]]></description><link>.\https:\\github.io\第-1-章、基础\1.2-错误.html</link><guid isPermaLink="false">第 1 章、基础/1.2 错误.md</guid><pubDate>Wed, 25 Jun 2025 11:12:53 GMT</pubDate><enclosure url=".\https:\\github.io\lib\media\pasted-image-20250624161626.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;.\https:\\github.io\lib\media\pasted-image-20250624161626.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[1.3 常量]]></title><description><![CDATA[ 
 <br>all/constants 内的所有变量我们名义上称为 “常量”（constants）<br>
<br>名义常量：<br>
虽以常量形式定义，实际为可修改的变量，但强制约定：

<br>允许读取引用
<br>禁止直接修改（破坏位运算逻辑）


<br><br>constants 内的常量最终基本都会转换为二进制进行位运算<br>二进制结果已换行处理，便于查看<br><br><br>只写常用的，详细请参考 all/constants <br><br><br>]]></description><link>.\https:\\github.io\第-1-章、基础\1.3-常量.html</link><guid isPermaLink="false">第 1 章、基础/1.3 常量.md</guid><pubDate>Thu, 26 Jun 2025 00:47:23 GMT</pubDate></item><item><title><![CDATA[行为规范]]></title><description><![CDATA[ 
 <br><br><br><br><br>（参考 all/U.attack_order 函数）<br><br><br>注意：闪避优先级较高，如果有闪避动画，则会打断优先级低的行为<br>（参考 all/scripts.soldier_barrack.update 函数）<br>参考资料：<br><a class="auto-card-link-card" href="https://tieba.baidu.com/p/9764441850"><div class="auto-card-link-main"><div class="auto-card-link-title"></div><div class="auto-card-link-description"></div><div class="auto-card-link-host"></div></div></a>关于士兵是如何攻击的讨论 by天玑布可 -百度贴吧事情是这样的，因为今天lz很闲，偶然看到一个吧友问和刺客秒杀相关的事情，然后就真的写了很多东西和数学计算，结果最后翻开底层代码仔细看了一下发现全错!)  所以单独开一个贴，写一下士兵究竟是怎么一个攻击逻辑。也望各位引以为戒，对斩钉截铁说出的话要进行查证]]></description><link>.\https:\\github.io\第-1-章、基础\1.4-函数.html</link><guid isPermaLink="false">第 1 章、基础/1.4 函数.md</guid><pubDate>Wed, 25 Jun 2025 12:51:53 GMT</pubDate></item><item><title><![CDATA[1.5 存档]]></title><description><![CDATA[ 
 <br><br>
<br>用于存储各种英雄等级，加点，完成的成就、星星以及升级、关卡完成情况等
<br><br>
<br>存档位置：C:\Users\你的用户名\AppData\Roaming\kingdom_rush_xxx 
<br>存档内就是一些简单的表，不进行赘叙，略过<br><br><br>local slot = storage:load_slot()
<br><br>storage:save_slot(slot)
<br>Warning
注意：因为这个函数会将存档直接完全替换为保存的表，所以这个表刚开始必须先读取存档，否则存档会丢失此前保存的内容，仅有这个表的内容
<br>
<br>示例：
<br>slot = storage:load_slot()	-- slot 接收存档的表，如果你要修改存档必须首先加载存档

slot.heroes.status.hero_gerald.xp = 2333	-- 将爵士的经验设置为 2333 点

storage:save_slot(slot) -- 保存到存档里
]]></description><link>.\https:\\github.io\第-1-章、基础\1.5-存档.html</link><guid isPermaLink="false">第 1 章、基础/1.5 存档.md</guid><pubDate>Wed, 25 Jun 2025 07:33:25 GMT</pubDate></item><item><title><![CDATA[注意事项]]></title><description><![CDATA[ 
 <br><br>给一个变量赋值表，就是复制其引用（内存地址），除非显式（深拷贝）复制它<br><br><br><br>
<br>可以在方括号内填写变量，或者数字、字符串
<br>示例：table[1]、table["str"]、table[a]
<br><br>
<br>仅能索引字符串
<br>示例：table.str
<br>Warning
注意：如果键 str 不存在，尝试索引子键 x 会引发索引 nil 值错误<br>
示例：table.str.x
因为表内不存在的键都是 nil ，nil 不是一个表所以不存在子键，无法索引
但是如果只是给不存在的 str 赋值，那么将会自动创建 str 键然后接收这个值
<br><br>你可能已经注意到调用函数和定义函数时的冒号了，其主要作用如下<br><br>
<br>
调用时将冒号前的一个表隐式传递

<br>调用时：E:register_t(模板名, 组件) 
<br>等价于 E.register_t(E, 模板名, 组件)


<br>
定义时隐式定义一个形式参数 self

<br>定义时：function entity_db:register_t(name, base) 
<br>等价于 function entity_db.register_t(self, name, base)


<br><br>综上使用冒号与点的区别仅在于隐式传递与隐式定义 self]]></description><link>.\https:\\github.io\第-1-章、基础\注意事项.html</link><guid isPermaLink="false">第 1 章、基础/注意事项.md</guid><pubDate>Wed, 25 Jun 2025 10:54:32 GMT</pubDate></item><item><title><![CDATA[精灵]]></title><description><![CDATA[ 
 <br>
<br>sprite.pos：精灵的位置，以左上角为原点（0， 0）
<br>sprite.draw_order：绘制顺序，可能用于覆盖Z值
<br>sprite.ignore_start：是否忽略起始时间（立即开始）
<br>animated：布尔值，是否启用动画
<br>group&nbsp;&amp;&nbsp;prefix：精灵所属资源组和前缀名，用于定位动画资源
<br>name：当前播放的动画名称（如 "idle",&nbsp;"attack"）
<br>anchor：锚点
<br>offset：位置偏移量
<br>loop &amp;&nbsp;loop_forced：是否循环播放动画。loop_forced 可能强制覆盖动画本身的循环设置
<br>flip_x：是否镜像翻转
<br>r：旋转角度
<br>scale：缩放比例
<br>alpha：透明度（0 透明 ~&nbsp;255 不透明）和显隐状态
<br>hidden： 是否隐藏精灵
<br>z：渲染层级，控制绘制顺序
<br>angles&nbsp;<br>- 用于方向性动画（如八方向角色移动）：
    
    angles = {0, 45, 90, ...}      -- 角度列表
    angles_flip_horizontal = true  -- 水平翻转时角度是否自动适配
    angles_custom = function(angle) ... end -- 自定义角度处理
<br>
<br>
fps&nbsp;&amp;&nbsp;ts

<br>帧率（nil用默认值）和时间戳（累计动画时间）。<br>



<br>
frame_idx&nbsp;&amp;&nbsp;frame_name

<br>当前帧索引（从1开始）和帧名称（若使用帧名动画）。<br>



<br>
hide_after_runs

<br>动画播放指定次数后自动隐藏（如爆炸动画播完消失）。<br>



<br><br><br>
<br>
sort_y&nbsp;&amp;&nbsp;sort_y_offset

<br>按Y轴排序精灵（模拟深度效果），sort_y_offset为排序偏移量。<br>



<br>
sync_idx&nbsp;&amp;&nbsp;sync_flag

<br>同步多个精灵的动画（如让多个对象播放相同帧）。<br>



<br>
random_ts

<br>随机起始时间，避免多个精灵动画同步播放。<br>



<br>
size_names&nbsp;&amp;&nbsp;size_scales

<br>多尺寸精灵支持（如size_names = {"sm", "lg"},&nbsp;size_scales = {0.5, 1.5}）。<br>



<br><br><br>
<br>runs: 动画已循环次数。<br>

<br>hidden_count: 隐藏计数器（用于延迟隐藏）。<br>

<br>time_offset: 时间偏移（延迟启动动画）。<br>

<br>ignore_start: 是否跳过初始帧。
]]></description><link>.\https:\\github.io\第-2-章、动画\精灵.html</link><guid isPermaLink="false">第 2 章、动画/精灵.md</guid><pubDate>Thu, 19 Jun 2025 12:15:17 GMT</pubDate></item><item><title><![CDATA[0.1 配置环境]]></title><description><![CDATA[ 
 <br>开始之前先说一下游戏的引擎版本：<br>Lua_v5.1 + Love 2d_v10.2<br>（通过 print 版本信息得到）<br><br>开始修改前建议先观看两门教程（至少需要两个小时）<br>
<br>
<a data-tooltip-position="top" aria-label="https://www.bilibili.com/video/BV1vf4y1L7Rb/" rel="noopener nofollow" class="external-link" href="https://www.bilibili.com/video/BV1vf4y1L7Rb/" target="_blank">Lua教程-入门—哔哩哔哩</a>

<br>
<a data-tooltip-position="top" aria-label="https://www.bilibili.com/video/BV1WR4y1E7ud/" rel="noopener nofollow" class="external-link" href="https://www.bilibili.com/video/BV1WR4y1E7ud/" target="_blank">Lua教程-进阶—哔哩哔哩</a>

<br><br><br><a class="auto-card-link-card" href="https://code.visualstudio.com/"><div class="auto-card-link-main"><div class="auto-card-link-title"></div><div class="auto-card-link-description"></div><div class="auto-card-link-host"><span></span></div></div></a>Visual Studio Code - Code Editing. RedefinedVisual Studio Code redefines AI-powered coding with GitHub Copilot for building and debugging modern web and cloud applications. Visual Studio Code is free and available on your favorite platform - Linux, macOS, and Windows.code.visualstudio.com<img class="auto-card-link-thumbnail" src="https://code.visualstudio.com/opengraphimg/opengraph-home.png" draggable="false"><br><br><br>
<br>如果嫌这个 Lua 扩展卡顿，可以安装上面的 Lua，缺点就是无中文翻译<br>
<img alt="Pasted image 20250615164100.png" src=".\https:\\github.io\_save\已压缩\pasted-image-20250615164100.png" style="width: 281px; max-width: 100%;">
<br><br><br><br><br><br><img alt="Pasted image 20250617205212.png" src=".\https:\\github.io\_save\已压缩\pasted-image-20250617205212.png" style="width: 356px; max-width: 100%;"><br><br><br><br>图片路径仅供参考，请填写你的安装目录<br>
<img alt="Pasted image 20250618091025.png" src=".\https:\\github.io\_save\已压缩\pasted-image-20250618091025.png" style="width: 475px; max-width: 100%;"> <br><br>验证是否出现窗口，如果出现窗口则安装成功<br>
<img alt="Pasted image 20250622125753.png" src=".\https:\\github.io\_save\已压缩\pasted-image-20250622125753.png" style="width: 650px; max-width: 100%;"><br><br><br>注意：路径不要有中文<br>推荐放在 D 盘<br><br><br>如图二所示即可<br><br><br><img alt="Pasted image 20250618125723.png" src=".\https:\\github.io\_save\已压缩\pasted-image-20250618125723.png" style="width: 700px; max-width: 100%;"><br><br><br><br>
<br>用以下代码替换启动文件 → 保存
<br>{
	"version": "0.2.0",
	"configurations": [
		{
			"type": "lua-local",
			"request": "launch",
			"name": "Debug",
			"program": {
				"command": "love"
			},
			"args": [
				".",
				"debug"
			]
		},
		{
			"type": "lua-local",
			"request": "launch",
			"name": "Release",
			"program": {
				"command": "love"
			},
			"args": [
				"."
			]
		}
	]
}
<br>
<br>反编译 main → 向 main 顶部增加一块代码 → 保存
<br>if arg[2] == "debug" then
	require("lldebugger").start()
end
<br>如图即可：<br>
<img alt="Pasted image 20250618143019.png" src=".\https:\\github.io\_save\已压缩\pasted-image-20250618143019.png" style="width: 600px; max-width: 100%;"><br>反编译见 <a data-href="0.2 工具#反编译软件" href=".\https:\\github.io\0.2-工具.html#反编译软件" class="internal-link" target="_self" rel="noopener nofollow">0.2 工具 &gt; 反编译软件</a><br>注意：反编译后需要用 output 的文件替换掉 main（以后反编译不再赘叙）<br>
<img alt="Pasted image 20250618134903.png" src=".\https:\\github.io\_save\已压缩\pasted-image-20250618134903.png" style="width: 700px; max-width: 100%;"><br>参考资料：<br><a class="auto-card-link-card" href="https://www.cnblogs.com/linxiaoxu/p/17653162.html"><div class="auto-card-link-main"><div class="auto-card-link-title"></div><div class="auto-card-link-description"></div><div class="auto-card-link-host"><span></span></div></div></a>[Love] VSCODE 调试 LOVE 引擎游戏 - 小能日记 - 博客园## VSCODE调试LOVE引擎游戏 ### **安装插件** ### **配置插件** 按 `CTRL + SHIFT + P`，打开`Preferences: Open User Settings (JSON)`，为settings.json添加如下代码 ```lua &amp;quot;Lua.ru<img class="auto-card-link-favicon" src="https://assets.cnblogs.com/favicon_v3_2.ico">www.cnblogs.com<br><br><br><img alt="Pasted image 20250618150508.png" src=".\https:\\github.io\_save\已压缩\pasted-image-20250618150508.png" style="width: 550px; max-width: 100%;"><br><br><br>Debug 为调试模式<br>
<br>调试模式会对性能造成较大影响<br>
Release 为正常模式<br>
<img alt="Pasted image 20250618145003.png" src=".\https:\\github.io\_save\已压缩\pasted-image-20250618145003.png" style="width: 357px; max-width: 100%;">
<br><br>尽量打到会立刻触发的代码上，比如 kr/game_templates 内<br>
<img alt="Pasted image 20250618143505.png" src=".\https:\\github.io\_save\已压缩\pasted-image-20250618143505.png" style="width: 625px; max-width: 100%;"><br><br>注意：运行需要打开 steam<br>
<img alt="Pasted image 20250618152216.png" src=".\https:\\github.io\_save\已压缩\pasted-image-20250618152216.png" style="width: 500px; max-width: 100%;"><br><br><img alt="Pasted image 20250618143251.png" src=".\https:\\github.io\_save\已压缩\pasted-image-20250618143251.png" style="width: 800px; max-width: 100%;"><br>
<br>完成后注意一下存档位置会在 C:\Users\你的用户名称\AppData\Roaming\LOVE 里面
<br><br><br>true 改 false<br>
<img alt="Pasted image 20250618142239.png" src=".\https:\\github.io\_save\已压缩\pasted-image-20250618142239.png" style="width: 325px; max-width: 100%;"><br><br><img alt="Pasted image 20250618161513.png" src=".\https:\\github.io\_save\已压缩\pasted-image-20250618161513.png" style="width: 600px; max-width: 100%;"><br><br><br>``<br><br>
<br>点击左上角金币图标，开启有 UI 的控制台（功能与快捷键相同）<br>
<img alt="Pasted image 20250620190901.png" src=".\https:\\github.io\_save\已压缩\pasted-image-20250620190901.png" style="width: 600px; max-width: 100%;">
<br><br><br><br>设置后可按 0 手动触发断点<br>
<br>断点触发后可以直接右键修改变量的值、以及在调试控制台执行代码
<br>注意：断点必须使用调试模式运行才有效<br><br>直接搜索就行<br><br>if key == "0" then
	print("Break-point")
end
<br><img alt="Pasted image 20250620203617.png" src=".\https:\\github.io\_save\已压缩\pasted-image-20250620203617.png" style="width: 550px; max-width: 100%;"><br><br>注意：只有触发断点时监视才可用<br><br><img alt="Pasted image 20250621105918.png" src=".\https:\\github.io\_save\已压缩\pasted-image-20250621105918.png" style="width: 450px; max-width: 100%;"><br><br>
<br>打开设置（左下角） 
<br>点击文本编辑器 → 字体 → 输入 JetBrains Mono （请确保已安装）
<br>]]></description><link>.\https:\\github.io\0.1-配置环境.html</link><guid isPermaLink="false">0.1 配置环境.md</guid><pubDate>Wed, 25 Jun 2025 11:19:29 GMT</pubDate><enclosure url="https://code.visualstudio.com/opengraphimg/opengraph-home.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;https://code.visualstudio.com/opengraphimg/opengraph-home.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[AI]]></title><description><![CDATA[ 
 <br><br>如有任何疑问，强烈建议先问一下 AI，然后再向他人寻求帮助。<br>先推荐一个 deep seek：<br><a class="auto-card-link-card" href="https://www.deepseek.com/"><div class="auto-card-link-main"><div class="auto-card-link-title"></div><div class="auto-card-link-description"></div><div class="auto-card-link-host"><span></span></div></div></a>DeepSeek | 深度求索我是 DeepSeek，很高兴见到你！我可以帮你写代码、读文件、写作各种创意内容，请把你的任务交给我吧~<img class="auto-card-link-favicon" src="https://www.deepseek.com/favicon.ico">www.deepseek.com<img class="auto-card-link-thumbnail" src="https://chat.deepseek.com/deepseek-chat.jpeg" draggable="false"><br>问 AI 最重要的是你想问的问题，需要先明确自己的遇到的问题。然后简单描述环境（或者直接复制上下文给 AI）<br>（不知道问题？建议把 lua 基础学会，了解一些名词）<br><br><br><br>可以拖文件夹，可能会弹非常多的弹窗<br>
<img alt="Pasted image 20250615210233.png" src=".\https:\\github.io\_save\已压缩\pasted-image-20250615210233.png" style="width: 959px; max-width: 100%;"><br><br><img alt="Pasted image 20250615210312.png" src=".\https:\\github.io\_save\已压缩\pasted-image-20250615210312.png" style="width: 675px; max-width: 100%;"><br><br><br><img alt="Pasted image 20250616103143.png" src=".\https:\\github.io\_save\已压缩\pasted-image-20250616103143.png" style="width: 368px; max-width: 100%;"><br><br><img alt="Pasted image 20250625162357.png" src=".\https:\\github.io\_save\pasted-image-20250625162357.png" style="width: 405px; max-width: 100%;">]]></description><link>.\https:\\github.io\0.2-工具.html</link><guid isPermaLink="false">0.2 工具.md</guid><pubDate>Wed, 25 Jun 2025 08:25:59 GMT</pubDate><enclosure url="https://www.deepseek.com/favicon.ico" length="0" type="image/x-icon"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;https://www.deepseek.com/favicon.ico&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[缩写总结]]></title><description><![CDATA[ 
 <br>]]></description><link>.\https:\\github.io\缩写总结.html</link><guid isPermaLink="false">缩写总结.md</guid><pubDate>Wed, 25 Jun 2025 12:52:42 GMT</pubDate></item><item><title><![CDATA[免责声明]]></title><description><![CDATA[ 
 <br><br>该文档仅限学习交流，禁止用于商业用途。<br>请购买正版游戏后再进行修改。若修改盗版出现任何问题，均与作者以及文档无关<br><br>本文档适用于电脑版的一代、二代、三代、五代，请注意版本（安卓版部分可用）<br>本文档仓库地址 <a data-tooltip-position="top" aria-label="https://github.com/MC123ACD/KR_modCourse" rel="noopener nofollow" class="external-link" href="https://github.com/MC123ACD/KR_modCourse" target="_blank">MC123ACD/KR_modCourse - Github</a><br>由于本人正处于学习阶段，所以错误在所难免，欢迎提出意见、提 requests]]></description><link>.\https:\\github.io\index.html</link><guid isPermaLink="false">index.md</guid><pubDate>Wed, 25 Jun 2025 12:09:38 GMT</pubDate></item></channel></rss>
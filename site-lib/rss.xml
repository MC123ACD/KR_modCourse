<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[王国保卫战修改教程]]></title><description><![CDATA[Obsidian digital garden]]></description><link>http://github.com/dylang/node-rss</link><image><url>site-lib/media/favicon.png</url><title>王国保卫战修改教程</title><link/></image><generator>Webpage HTML Export plugin for Obsidian</generator><lastBuildDate>Thu, 31 Jul 2025 08:09:47 GMT</lastBuildDate><atom:link href="site-lib/rss.xml" rel="self" type="application/rss+xml"/><pubDate>Thu, 31 Jul 2025 08:09:37 GMT</pubDate><ttl>60</ttl><dc:creator/><item><title><![CDATA[1 - 模板]]></title><description><![CDATA[首先使用搜索功能在 kr/game_templates 任意找到一个英雄模板模板定义见 <a data-href="1.1 - 实体#模板" href="第-1-章、基础/1.1-实体.html#模板" class="internal-link" target="_self" rel="noopener nofollow">1.1 - 实体 &gt; 模板</a><br>
模板名见<a data-href="详细数据#(一) 模板" href="详细数据.html#(一) 模板" class="internal-link" target="_self" rel="noopener nofollow">详细数据 &gt; (一) 模板</a>如图以小公主为例：<br>
<img alt="Pasted image 20250626164940.png" src="site-lib/media/pasted-image-20250626164940.png" target="_self" style="width: 800px; max-width: 100%;">
可以看到有很多 tt...，tt 指的是对应英雄，然后第一个键指来源于哪个组件，例如 tt.hero.hp_max 指对应英雄的 hero 组件的最大血量基础属性如图（已折叠）：<br>
<img alt="Pasted image 20250626190509.png" src="site-lib/media/pasted-image-20250626190509.png" target="_self" style="width: 450px; max-width: 100%;"> 第一行：armor 物理护甲 第二行：hp_max 最大血量 还有近战普攻、远程普攻的最大最小伤害等<br>
<img alt="Pasted image 20250626191037.png" src="site-lib/media/pasted-image-20250626191037.png" target="_self" style="width: 352px; max-width: 100%;">
如图假如要修改的是最大血量 展开发现有 10 行数字，其实这是行数对应等级的血量
例如：修改第十行为 233，那么英雄 10 级时血量则为 233 点
其他属性同理 将第十行血量修改为 666，然后运行游戏<br>
<img alt="Pasted image 20250626192149.png" src="site-lib/media/pasted-image-20250626192149.png" target="_self" style="width: 377px; max-width: 100%;"><br>
<img alt="Pasted image 20250626191819.png" src="site-lib/media/pasted-image-20250626191819.png" target="_self" style="width: 541px; max-width: 100%;">
如图血量变为 666 成功
若未成功可以检查一下英雄等级是否到 10 级，当然也可以修改其他行只要英雄到达这个等级
还要检查出战的英雄是不是你改的英雄
五代的键值是这样的：<br>
<img alt="Pasted image 20250630133711.png" src="site-lib/media/pasted-image-20250630133711.png" target="_self" style="width: 625px; max-width: 100%;">
通过查看模板的定义知道：基础属性的存储位置在 balance<br>
<img alt="Pasted image 20250630134949.png" src="site-lib/media/pasted-image-20250630134949.png" target="_self" style="width: 245px; max-width: 100%;">
如图在 balance 搜索要改的英雄，同样可以找到基础属性，修改 hp_max 即可
Q：程序是如何知道我们在修改哪个英雄？换句话说 tt 指的是什么
A：因为 E:register_t 函数会返回创建的模板的引用，也就是说此时 tt 就是 E.entities.hero_alleria
除非重新给 tt 赋值（比如创建另一个英雄模板，然后 tt 就直接指向新模板了，也就是说此后修改的血量等都是修改新模板的）
<br>E:register_t 函数见 <a data-href="1.1 - 实体#1 创建模板" href="第-1-章、基础/1.1-实体.html#1 创建模板" class="internal-link" target="_self" rel="noopener nofollow">1.1 - 实体 &gt; 1 创建模板</a>下面来看 skills 技能的基础属性<br>
<img alt="Pasted image 20250627155614.png" src="site-lib/media/pasted-image-20250627155614.png" target="_self" style="width: 450px; max-width: 100%;">
如图为艾莉丹假设要修改艾莉丹的四技能；双刀跳斩的伤害<br>
首先查资料（见<a data-href="详细数据" href="详细数据.html" class="internal-link" target="_self" rel="noopener nofollow">详细数据</a> 代码名称大全）知道：四技能的名称是 double_strike<br>
<img alt="Pasted image 20250627185432.png" src="site-lib/media/pasted-image-20250627185432.png" target="_self" style="width: 450px; max-width: 100%;">
五代还是与基础属性相同在 balance
3 行数字意义同上
例如：修改第三行最大伤害为 233 则双刀跳斩三级时最大伤害为 233 点
修改后同上运行游戏测试就行，不再赘叙
Q：如果我想修改冷却时间等其他属性，这里怎么没有
A：因为这里只有一些基础属性，修改方法下面会提到
Q：有些技能的属性找不到怎么办
A：有些技能直接用的乘数，也就是每次到达对应等级，技能的属性会 = 技能等级 × inc
可以重点找带 inc 名的键
继续往下有一些近战攻击（melee）与远程攻击（ranged）的组件首先需要先明白一些组件的用途近战攻击与远程攻击统称为攻击，防御塔攻击不包含在内拦截可以进行的远程攻击称为特殊远程攻击<br><img alt="Pasted image 20250630143223.png" src="site-lib/media/pasted-image-20250630143223.png" target="_self" style="width: 500px; max-width: 100%;">
如图，一般第一个近战与远程攻击 attacks[1] 为普通攻击，其他都是相应行为的技能
Q：怎么知道我修改的是哪个攻击
A：可以查资料找这个攻击的键对应哪个攻击
注：有的攻击可能会占有多个攻击，可以通过 table.deepclone 复制的攻击来分辨
用于播放不同动画，与增加额外效果
本质：远程攻击本质是召唤子弹，让子弹造成伤害
所以修改远程攻击只能修改远程攻击召唤的速度（攻击速度）、召唤范围（攻击范围）等因为是召唤子弹所以远程攻击的伤害和伤害类型等都是写在子弹上的，可以通过搜索子弹键（bullet）的键值对应的模板来找到子弹的各种键<br>
<img alt="Pasted image 20250630184001.png" src="site-lib/media/pasted-image-20250630184001.png" target="_self" style="width: 850px; max-width: 100%;"><br>
<img alt="Pasted image 20250630184104.png" src="site-lib/media/pasted-image-20250630184104.png" target="_self" style="width: 725px; max-width: 100%;">
有些子弹的键可能是 nil 甚至没有
没有基本就是衍生底模板或者写在基础属性那里了
找不到想修改的属性，可以通过查看技能的实现方法来找到属性的位置示例：E:clone_c("spawn_attack") 召唤实体，实现方法就是召唤实体，和远程攻击的子弹一样；搜索 entity 键的键值的模板来找到想修改的属性-- 小公主一技能野性呼唤
tt.timed_attacks.list[1] = E:clone_c("spawn_attack")
tt.timed_attacks.list[1].entity = "soldier_alleria_wildcat"	-- 搜索 soldier_alleria_wildcat 模板，可以找到野猫的属性
还有光环、效果、子弹都是搜索对应键的键值的模板来找到想修改的属性注：这些模板内可能会多次套娃套其他的模板，只要记住重点找效果、光环、子弹、实体这些就行在攻击组件可能找不到伤害类型，不妨先搜索 E:add_comps 的 melee 组件看看有没有默认值在 components 搜索 melee 组件<br>
<img alt="Pasted image 20250630155536.png" src="site-lib/media/pasted-image-20250630155536.png" target="_self" style="width: 775px; max-width: 100%;">
如图发现没有伤害类型，继续往下在 E:clone_c 发现攻击 1 来自 melee_attack，继续搜索 melee_attack<br>
<img alt="Pasted image 20250630160301.png" src="site-lib/media/pasted-image-20250630160301.png" target="_self" style="width: 825px; max-width: 100%;">
如图我们发现近战攻击是有伤害类型的，默认是物伤，也就是说英雄的近战攻击如果不填伤害类型，那么伤害类型就是物伤由此可以这样修改：-- 模板内
tt.melee.attacks[1].damage_type = DAMAGE_TRUE	-- 手动加上伤害类型键，然后键值写伤害类型就行
<br>伤害类型见 <a data-href="详细数据#一、伤害类型" href="详细数据.html#一、伤害类型" class="internal-link" target="_self" rel="noopener nofollow">详细数据 &gt; 一、伤害类型</a>
其他比如魔抗等同理，可以通过以上方法改（看看有没有默认值）
重点搜索 E:register_t / E:add_comps / E:clone_c 的组件或模板
主要目的：让单位攻击造成减速效果、中毒、燃烧等① 近战攻击直接在组件后面增加 mod 键，键值为效果模板名
② 远程攻击增加到子弹模板的 bullet 键上，个别远程攻击无效
③ 技能能不能增加，增加到哪里取决于函数，后面修改函数再解释示例：-- 单位模板内
tt.melee.attacks[1].mod = "mod_lava"	--普通近战攻击造成燃烧效果，此燃烧来自模板可自行搜索 -- 子弹模板内
tt.bullet.mod = "mod_lava"	-- 子弹造成燃烧效果 注意：由于五代所有新加的键不会被读取所以必须写在 game_templates 内，写在 balance 是不会生效的
不嫌麻烦可以让新键的键值也读取 balance
让维斯珀普通近战攻击造成燃烧效果-- balance 模块内
hero_spider = { basic_melee = {	-- 普通近战攻击 mod = "mod_lava",	-- 效果 ...	-- 其他键值对，攻击速度等 }
} -- game_templates 模块内
b = balance.heroes.hero_spider
tt.melee.attacks[1].mod = b.basic_melee.mod	-- 读取 balance 内的表
不推荐这种方法，如果你不想改 game_templates 也不行，因为后面基本都要改，一些东西也不在 balance 内
Q：为什么攻击可以直接增加效果，而技能不行
A：因为近战攻击与远程攻击用的对应函数都有造成效果，而技能是单独的逻辑不一定有
Q：如何造成多个效果
A：只有光环和远程攻击可以造成多个效果，并且方法还不一样（铁皮逆天代码发力了）后面函数篇再讲怎么让近战攻击等造成多个效果
具体方法：
-- 子弹
tt.bullet.mod = {	-- 注意是 mod，不是 mods 效果 1, 效果 2 ...
} -- 光环
tt.aura.mods = {	-- 注意是 mods，不是 mod，找不到光环可以先不管，知道怎么加就行 效果 1, 效果 2 ...
}
手动创建一个效果模板以原效果为底表，然后修改键，增加这个效果即可注意：不建议直接修改基础效果（例如 all/templates 内的），因为其他实体可能也在使用这个效果，如果修改则会影响其他实体
想直接修改效果必须保证这个效果没有其他实体使用或作为底模板使用
一般英雄特有的效果基本可以随便改，不要死脑筋都创建一个新效果
-- 模板内
-- 原 tt.melee.attacks[1].mod = "mod_lava"
tt.melee.attacks[1].mod = "mod_lava_2"	--仅存储模板名，所以创建与增加 mod 无先后顺序 -- 子弹模板内
-- 原 tt.bullet.mod = "mod_lava"
tt.bullet.mod = "mod_lava_2" lava_2 = E:register_t("mod_lava_2", "mod_lava")	-- 创建 mod_lava_2 模板以 mod_lava 为底模板
-- 接收返回值的变量不建议使用 tt，因为会修改 tt 的引用，导致之后增加的键增加到效果里，与预期的位置不符导致错误 lava_2.dps.damage_inc = 6	-- inc 倍数，也就是伤害倍数 6 倍（原燃烧伤害倍数 3）
lava_2.dps.damage_every = 0.1	-- 伤害间隔，每 0.1 秒造成一次伤害
自行搜索 mod_lava 模板查看有哪些键主要目的：实现两个不同效果不可共存效果模板使用 modifier.bans 键，键值为效果表，即可让两个不相同效果单向不可叠加
注意这里是单向，双向需要互相增加对方效果
即 A ban B，有 A 不能有 B，有 B 可以有 A。AB 互相 ban，有 A 不能有 B，有 B 不能有 Amodifier.ban_types 键则是一个效果类型（类似于 flag 标签）
例如：mod_freeze 冻结效果就是典型 MOD_TYPE_FREEZE 类型，mod_elora_bolt_freeze 冰女的冻结也是这个类型<br>效果类型见 <a data-href="详细数据#三、效果类型" href="详细数据.html#三、效果类型" class="internal-link" target="_self" rel="noopener nofollow">详细数据 &gt; 三、效果类型</a>-- 燃烧效果模板内
tt.modifier.bans = { "mod_freeze",	-- 指定具体效果，如果目标上有燃烧效果，目标将不会被冻结 ...	-- 可指定多个
}
tt.modifier.ban_types = {	-- 可选 MOD_TYPE_FREEZE,	-- 指定一个效果类型，如果目标上有燃烧效果，目标将不会被冻结类型的所有效果冻结 ...
}
主要目的：实现类似于两个效果之间元素的克制关系，让两个效果互斥，例如冻结与燃烧，如果目标上有冻结，此时给目标造成燃烧效果，主动移除冻结效果在之前的基础上给效果模板增加 modifier.remove_banned 键，键值为 true，即可注意：
还是单向，双向方法同上
与上面的不可共存共用同一个键，并且是复合含义所以易混淆，可以明确一下含义：一个是被动无法与对应效果共存 A ← B，一个是主动移除对应效果 A → B
被动优先级高于主动，如果对方效果被动与当前效果无法共存，当前效果主动移除对方效果，因为被动优先级高所以当前效果将不会被造成
-- 燃烧效果模板内
tt.modifier.remove_banned = true
tt.modifier.bans = { "mod_freeze",	-- 指定具体效果，如果目标上有冻结效果，主动移除冻结效果，并且被动无法与冻结共存 ...
} tt.modifier.ban_types = {	-- 可选 MOD_TYPE_FREEZE,	-- 指定一个效果类型，如果目标上有冻结类型的效果，主动移除冻结类型的效果，并且被动无法与冻结共存 ...
}
相同效果就是模板名称相同的效果，效果等级就是 modifier.level 键给效果模板加上 modifier.allows_duplicates 键，键值为 true，即可允许叠加多个相同等级的相同效果modifier.replaces_lower 键为替换不相同等级的相同效果
modifier.resets_same 键为重置相同等级的相同效果的持续时间
注意等级问题使攻击 E:clone_c("aura_attack")，然后加上伤害范围等即可示例：tt.melee.attacks[1] = E:clone_c("area_attack")
tt.melee.attacks[1].damage_radius = 25	-- 伤害范围 25 码，必要
tt.melee.attacks[1].count = 3	-- 最多对三名敌人造成伤害，可选
tt.melee.attacks[1].min_count = 2	-- 需要两名敌人才能进行这个攻击，可选
只要给攻击加上 loops 键并在键值设置次数，设置播放的动画，即可实现每次攻击时攻击多次
hit_times 或 shoot_times 则是一次攻击的次数注意：loops 键的键值必须要有值， hit_times 和 shoot_times 才会生效
可以理解成乘算：攻击次数 = loops × hit_times/shoot_times
tt.melee/ranged.attacks[1].animations = { nil, "attack/shoot",	-- 近战攻击填 "attack"，远程攻击填 "shoot"，套用普通攻击动画 nil
}
根据数字决定攻击次数示例：tt.melee.attaks[1].loops = 2	-- 攻击 2 次
根据表的键数决定近战攻击一次攻击的次数示例：tt.melee.attacks[1].animations = { nil, "attack",	-- 近战攻击填 "attack" nil
}
tt.melee.attaks[1].loops = 1	-- 不想每次攻击多次填 1 就行
tt.melee.attaks[1].hit_times = {n, fts(1)}	-- 一次攻击 2 次，n 为秒，1 fts = 1 ÷ 30
根据表的键数决定远程攻击一次攻击的次数示例：tt.ranged.attacks[1].animations = { nil, "shoot",	-- 远程攻击填 "shoot" nil
}
tt.ranged.attaks[1].loops = 1
tt.ranged.attaks[1].shoot_times = {n, fts(1)}	-- 一次性攻击 2 次
只需要给实体增加闪避组件即可示例：E:add_comps(tt, "dodge", ...)	-- 增加闪避组件
tt.dodge.chance = 0.25	-- 闪避概率 25 %
tt.dodge.silent = true	-- true 表示无动画
主要目的：对特定目标不释放某个攻击，或释放技能
当然也可以实现对特定单位、攻击以及技能的特定行为攻击的标签与过滤标签写在 vis_flags 和 vis_bans 键上，而单位则是 vis 键的 flags 和 bans 键上一般用于索敌：每次索敌时与标签进行按位与运算
首先判断攻击标签 vis_flags 有没有被目标 vis.bans 过滤，然后再判断目标标签 vis.flags 有没有被攻击 vis_bans 过滤
即：攻击过滤 → 目标标签，目标过滤 → 攻击标签
如果任意一方被过滤，则不选择这个目标参考 SU.soldier_pick_melee_attack 代码片段：
band(a.vis_flags, t.vis.bans) == 0 and band(a.vis_bans, t.vis.flags) == 0<br>可以通过位运算来增加多个标签，位运算见 <a data-href="1.3 - 常量#位运算" href="第-1-章、基础/1.3-常量.html#位运算" class="internal-link" target="_self" rel="noopener nofollow">1.3 - 常量 &gt; 位运算</a><br>
所有标签见 <a data-href="详细数据#二、标签" href="详细数据.html#二、标签" class="internal-link" target="_self" rel="noopener nofollow">详细数据 &gt; 二、标签</a>-- 某个单位模板
tt.vis.bans = F_RANGED	-- 不会被远程攻击 tt.ranged.attacks[1].vis_bans = bor(F_BOSS, F_FLYING)	-- 远程攻击不攻击 boss 与飞行敌人
tt.ranged.attacks[1].vis_flags = F_RANGED	-- 远程攻击标签 -- 某个敌人模板
tt.vis.bans = F_DRILL	-- 不会被钻头攻击，就是二代的地震的钻头 支持在效果、光环上增加
可以自己在 constants 写个标签
参考资料：<br><a class="auto-card-link-card is-unresolved" href="https://tieba.baidu.com/p/9839262014" target="_self"><div class="auto-card-link-main"><div class="auto-card-link-title"></div><div class="auto-card-link-description"></div><div class="auto-card-link-host"></div></div></a>标签与技能的释放机制 by发的gtr让他发 -百度贴吧技能的释放与否由双方的 bans 和 flags 决定，两者的具体含义为：flags：标签我方bans：不会对有XX标签的敌人释放敌方bans：有XX标签的技能不会对它释放，即具有XX抗性。判定机制为：【只要有一方的 bans 与对方的 flags 配对，该技能就不会释放】，以下截取代码片段来分析几个具体例子（以秒杀技为例）。]]></description><link>第-1-章、基础/1-修改教程/1-模板.html</link><guid isPermaLink="false">第 1 章、基础/1 - 修改教程/1 - 模板.md</guid><pubDate>Thu, 31 Jul 2025 07:22:31 GMT</pubDate><enclosure url="." length="0" type="false"/><content:encoded>&lt;figure&gt;&lt;img src="."&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[2 - 函数]]></title><description><![CDATA[每次创建实体都会调用一次对应实体的插入函数有些技能就是通过插入函数来实现的；
典型代表就是二代女巫的 1 伤害的光环，原理：调用插入函数 → 判断技能等级 → 创建光环搜索对应英雄的模板，在 kr/game_scripts 就可以找到函数了（如图为艾莉丹）
<img alt="Pasted image 20250701213229.png" src="site-lib/media/pasted-image-20250701213229.png" target="_self" style="width: 825px; max-width: 100%;">
当然也可以直接跳转到对应函数的定义，不需要搜索，直接在对应英雄模板右键插入函数转到定义即可<br>
<img alt="Pasted image 20250705190320.png" src="site-lib/media/pasted-image-20250705190320.png" target="_self" style="width: 725px; max-width: 100%;">function scripts.hero_elves_archer.insert(this, store)
-- this 表示调用插入函数的完全独立的实体，store 就是存储实体的表 ...	-- 其他可以先不用管 local d = E:create_entity("damage")	-- 造成伤害 d.value = 233666	-- 伤害 d.target_id = this.id	-- 目标 id 设置为当前英雄 id queue_damage(store, d)	-- 插入伤害队列
end
使用修改的英雄进入关卡，英雄掉血，成功<br>
<img alt="Pasted image 20250716185606.png" src="site-lib/media/pasted-image-20250716185606.png" target="_self" style="width: 194px; max-width: 100%;">
造成效果同理，只不过要插入实体队列，而不是伤害队列local mod = E:create_entity(效果模板名)	-- 造成效果
mod.modifier.target_id = this.id	-- 目标
queue_insert(store, mod)	-- 插入实体队列
以给沙王增加死亡骑士光环为例function scripts.hero_alric.insert(this, store, script)
-- hero_alric 为沙王模板名，this 就是通过模板创建的沙王实体 ... -- 其他先不用管 if this.hero.skills.toughness.level &gt; 0 then	-- 若坚韧技能等级大于 0，可选 local e = E:create_entity("death_rider_aura")	-- 创建死亡骑士光环 e.aura.source_id = this.id	-- 来源设置为沙王 queue_insert(store, e)	-- 创建光环 e，也就是死亡骑士光环 end
end
<br>E:create_entity 与 queue_insert 作用见 <a data-href="1.4 - 函数#二、实体创建流程" href="第-1-章、基础/1.4-函数.html#二、实体创建流程" class="internal-link" target="_self" rel="noopener nofollow">1.4 - 函数 &gt; 二、实体创建流程</a>注意：this 指的不是模板，而是通过模板创建出来的完全独立的实体然后我们发现光环会显示在脸上，而不是脚下，这是因为默认光环显示位置有偏移，只需要移除偏移即可，修改光环的方法与修改效果相同-- 模块内
-- 创建新模板，底表为原死亡骑士光环，变量为缩写用于区分模板
araa = E:register_t("death_rider_aura_alric", "death_rider_aura") araa.aura.use_mod_offset = nil	-- 移除偏移
...	-- 其他属性同理，比如作用范围，护甲或伤害加成等 -- 插入函数内
local e = E:create_entity("death_rider_aura_alric")	-- 修改创建的实体表为新模板即可
注意：修改函数还是与修改效果相同：如果一个函数有多个效果在用，修改函数就需要复制这个函数，重新命名，然后让对应效果使用这个函数，最后再修改复制出来的函数-- 某个效果模板
--原 tt.main_script.insert = scripts.mod_dps.insert
tt.main_script.insert = scripts.mod_dps_2.insert -- 修改函数
scripts.mod_dps_2 = {}	-- 需要注意，避免索引问题
function scripts.mod_dps_2.insert() ... -- mod_dps 插入函数的代码，修改即可
end
删除实体插入函数的排序函数，直接在模板手动写优先级即可（写攻击的序号，例如攻击 1 就是 1）<br>攻击流程见 <a data-href="1.4 - 函数#攻击流程" href="第-1-章、基础/1.4-函数.html#攻击流程" class="internal-link" target="_self" rel="noopener nofollow">1.4 - 函数 &gt; 攻击流程</a><br><img alt="Pasted image 20250701134555.png" src="site-lib/media/pasted-image-20250701134555.png" target="_self" style="width: 500px; max-width: 100%;">-- 模板内
tt.melee.order = { 2,	-- 优先释放攻击 2 1,	-- 之后释放攻击 1 ...	-- 注意：必须填写所有的攻击，没填写的将不会被释放
}
注：仅能修改攻击，技能需要在更新函数修改代码顺序还是以艾莉丹的四技能，双刀跳斩为例tt.hero.skills.double_strike = E:clone_c("hero_skill")
tt.hero.skills.double_strike.cooldown = {	-- 假设要让双刀跳斩的冷却时间随等级变化（原版 12 秒） 12,	-- 一级 12 秒 10,	-- 二级 10 秒 8	-- 三级 8 秒
}
搜索方法同插入函数<br>
<img alt="Pasted image 20250705182915.png" src="site-lib/media/pasted-image-20250705182915.png" target="_self" style="width: 600px; max-width: 100%;">
这里就是每次升级时都会调用的函数，所有基础属性都会在这里赋值到对应属性键上你可能已经注意到了插入函数会调用一次这个函数 （this.hero.fn_level_up(this, store, true)）
这是因为升级函数只有升级时才会调用，所以需要在插入时调用一次进行初始化来保证属性赋值找到双刀跳斩对应的转化代码块，后面加上 a.cooldown = s.cooldown[s.level]：<br>
<img alt="Pasted image 20250705184937.png" src="site-lib/media/pasted-image-20250705184937.png" target="_self" style="width: 450px; max-width: 100%;"><br>调用流程见 <a data-href="1.4 - 函数#三、调用更新函数流程" href="第-1-章、基础/1.4-函数.html#三、调用更新函数流程" class="internal-link" target="_self" rel="noopener nofollow">1.4 - 函数 &gt; 三、调用更新函数流程</a>更新函数与插入函数寻找方法相同计算时间常用到 store.tick_ts 与 ts（时间戳）示例：a = this.timed_attacks.list[1]	-- 某个技能 if store.tick_ts - a.ts &gt; a.cooldown then a.ts = store.tick_ts	-- 表示已释放技能，刷新 a 的时间戳 -- 造成伤害等逻辑
...
表示如果当前时间与上次释放技能 a 的时间戳 之差大于冷却时间，则执行条件代码块
换句话说就是上次释放技能过去的时间大于冷却时间持续时间等同理注意：通常时间运算都在 while true 死循环内targets = U.find_enemies_in_range，U.find_xxx 这种都是索敌<br>使用方法详细见 <a data-href="详细数据#一、索敌" href="详细数据.html#一、索敌" class="internal-link" target="_self" rel="noopener nofollow">详细数据 &gt; 一、索敌</a>SU.y_soldier_melee_block_and_attacks(store, this) 近战攻击函数y_soldier_ranged_attacks 远程攻击函数无目标返回 A_NO_TARGET
无可用攻击返回 A_IN_COOLDOWN 攻击完毕 A_DONE`可以通过返回值判断攻击的状态，来执行某些代码块SU.y_soldier_ranged_attacks(store, this) 远程攻击函数<br>详细见 <a data-href="1.4 - 函数#攻击流程" href="第-1-章、基础/1.4-函数.html#攻击流程" class="internal-link" target="_self" rel="noopener nofollow">1.4 - 函数 &gt; 攻击流程</a>coroutine.yield() 循环末尾必须挂起协程，否则会卡死程序<br>流程见 <a data-href="1.4 - 函数#五、造成伤害流程" href="第-1-章、基础/1.4-函数.html#五、造成伤害流程" class="internal-link" target="_self" rel="noopener nofollow">1.4 - 函数 &gt; 五、造成伤害流程</a> <a data-href="1.4 - 函数#六、造成效果流程" href="第-1-章、基础/1.4-函数.html#六、造成效果流程" class="internal-link" target="_self" rel="noopener nofollow">1.4 - 函数 &gt; 六、造成效果流程</a> <a data-href="1.4 - 函数#二、实体创建流程" href="第-1-章、基础/1.4-函数.html#二、实体创建流程" class="internal-link" target="_self" rel="noopener nofollow">1.4 - 函数 &gt; 二、实体创建流程</a>通过查看流程我们知道：造成伤害、效果，以及召唤实体用的都是 E:create_entity 函数然后再加上具体目标，以及所有者的 id，具体属性等最后插入队列即可有些技能是支持造成效果的，但是有些则不能，我们可以通过以下方法来做到造成效果：找到技能造成伤害的代码块，在后面加上造成效果就行以给火男烈焰冲击增加燃烧效果为例（需要注意一下变量不要用错）-- 更新函数内
a = this.timed_attacks.list[1]	-- 看到这个就说明下面是对应技能的代码块了
skill = this.hero.skills.flaming_frenzy if sta ~= A_NO_TARGET and not a.disabled and store.tick_ts - a.ts &gt;= a.cooldown then	-- 计算冷却时间
... targets = U.find_enemies_in_range(store.entities, this.pos, 0, a.max_range, a.vis_flags, a.vis_bans)	-- 索敌 if targets then	-- 如果找到敌人 for _, t in pairs(targets) do	-- 范围伤害要遍历找到的所有敌人，单体没有遍历这一步 local d = E:create_entity("damage")	-- 造成伤害 d.damage_type = a.damage_type	-- 伤害类型 d.source_id = this.id	-- 所有者 id d.target_id = t.id	-- 目标 id d.value = math.random(a.damage_min, a.damage_max)	-- 具体伤害 queue_damage(store, d)	-- 插入伤害队列 -- 后面写上造成效果 if a.mod then	-- 避免没有 mod 导致的一些问题 local mod = E:create_entity(a.mod)	-- 也就是 this.timed_attacks.list[1].mod mod.modifier.target_id = t.id	-- 目标 id，再次注意：变量不要用错，是一个目标，而不是多个目标 -- 因为索敌是找范围内的所有敌人所以是遍历出来的单体 t，如果索敌找的是单体敌人，则直接用索敌找到的敌人 target 这些 mod.modifier.source_id = this.id	-- 可选，有些效果需要来源，推荐加上 ...	-- 后面一些可以按需求加 queue_insert(store, mod)	-- 插入实体队列 end end end
... -- 模板内
tt.timed_attacks.list[1].mod = "mod_lava_ignus"	-- 造成这个效果 local mod_lava = E:register_t("mod_lava_ignus", "mod_lava")
mod_lava.dps.damage_inc = 2	-- 修改伤害
通过上面的教程，个别子弹的效果无效也可以加上造成效果的代码块来解决，方法就不赘叙了，还是顺着 E:register_t 和 E:add_comps 找更新函数就行只需要在模板增加一个效果表（mods），然后在更新函数遍历这个表然后造成效果就行了还是以给火男烈焰冲击增加燃烧效果为例-- 火男更新函数内
a = this.timed_attacks.list[1]
skill = this.hero.skills.flaming_frenzy if sta ~= A_NO_TARGET and not a.disabled and store.tick_ts - a.ts &gt;= a.cooldown then
... targets = U.find_enemies_in_range(store.entities, this.pos, 0, a.max_range, a.vis_flags, a.vis_bans) if targets then for _, t in pairs(targets) do local d = E:create_entity("damage") d.damage_type = a.damage_type d.source_id = this.id d.target_id = t.id d.value = math.random(a.damage_min, a.damage_max) queue_damage(store, d) -- 修改造成效果的代码块 if a.mod or a.mods then	-- 避免没有 mod 导致的一些问题 local mods = a.mods or {	-- 没有 mods 则创建一个包含 mod 的表，然后赋值 a.mod } for _, mod_name in pairs(mods) do	-- 遍历效果表 local new_mod = E:create_entity(mod_name) new_mod.modifier.target_id = t.id new_mod.modifier.source_id = this.id queue_insert(store, new_mod) end end end end
... -- 模板内
tt.timed_attacks.list[1].mods = { 效果 1,	-- 因为 mod 会被覆盖，所以需要注意一下如果原本就有效果，需要加上之前的效果，否则技能将不会造成之前的效果 效果 2 ...
} <br>所有索敌函数见 <a data-href="详细数据#一、索敌" href="详细数据.html#一、索敌" class="internal-link" target="_self" rel="noopener nofollow">详细数据 &gt; 一、索敌</a>target = find_foremost_enemy(..., function(v，origin)	-- 其他传递的参数省略，v 会传递实体表，origin 会传递圆心 ...	-- 函数体 return v.health.hp &gt;= 1000	-- 寻找血量大于等于 1000 的敌人
end, ...) <br>函数见 <a data-href="详细数据#二、判断拥有效果" href="详细数据.html#二、判断拥有效果" class="internal-link" target="_self" rel="noopener nofollow">详细数据 &gt; 二、判断拥有效果</a>target = find_foremost_enemy(..., function(v，origin) ... return v.health.hp &gt;= 1000 and U.has_modifiers(store, v, "mod_lava") -- 寻找血量大于等于 1000，并且处于燃烧效果的敌人
end, ...) 因为基本所有索敌都是从范围索敌改来的，由此先通过范围索敌找到目标，然后排序血量最高的敌人local targets = U.find_enemies_in_range(store.entities, hero.pos, 0, a.radius, a.vis_flags, a.vis_bans)
--索敌 if targets then table.sort(targets, function(e1, e2)	-- 排序函数 return e1.health.hp &gt; e2.health.hp	-- 根据血量排序，最终血量最高的会排序在最前 end) local target = targets[1]	-- 取第一个目标 ...	-- 后面造成伤害，造成效果，目标都传第一个目标即可
返回 true 表示 e1 在前 e2 在后，false 则是 e1 在后 e2 在前当然你也可以根据伤害、速度、护甲大小排序，表示选择伤害最高或最低、速度最快或最慢、护甲最高或最低的目标主要目的：给实体释放某个近战攻击增加条件，满足条件才释放这个攻击注意：仅支持实体的近战攻击，技能与远程不支持，防御塔的攻击也不支持只需要给实体的模板的近战攻击增加 fn_can 键，键值为函数即可以给一代鬼侍二技能灭魂斩增加血量释放条件为例-- 鬼侍模板内
tt.melee.attacks[3].trigger_min_hp = 150	-- 释放条件：目标血量大于等于 150，键自己编一个就行，仅用于后续方便修改，你直接写到函数也是没问题的
tt.melee.attacks[3].fn_can = scripts.hero_oni.fn_can_death_strike	-- 函数名自己编一个 -- game_scripts 模块内，最好和更新函数与插入函数写在同一个位置
function scripts.hero_oni.update(this, store)
... end function scripts.hero_oni.fn_can_death_strike(this, store, a, target) return target.health.hp &gt;= a.trigger_min_hp	-- 目标血量大于等于设定的血量时返回 true，表示可以释放
end fn_can 函数会传递调用这个函数的实体，以及 store、攻击、目标
<br>见 <a data-href="1.4 - 函数#攻击流程" href="第-1-章、基础/1.4-函数.html#攻击流程" class="internal-link" target="_self" rel="noopener nofollow">1.4 - 函数 &gt; 攻击流程</a>
只需要给实体模板的远程攻击增加 filter_fn 键，键值为函数即可和索敌的过滤函数写法相同-- 模板内
tt.ranged.attacks[2].trigger_min_hp = 150 tt.ranged.attacks[2].filter_fn = scripts.xxx.filter_fn_xxx -- game_scripts 模块内，还是最好和更新函数与插入函数写在一个位置
function scripts.xxx.filter_fn_xxx(v, origin) return v.health.hp &gt; trigger_min_hp	-- 寻找低于阈值的敌人
end
本质还是索敌的过滤函数，过滤某些条件的目标主要目的：让实体释放近战攻击概率，根据不同条件动态变化，例如对处于流血效果的目标造成百分百概率秒杀注意：还是仅支持实体的近战攻击，技能与远程不支持，防御塔的攻击也不支持只需要给实体的模板的攻击增加 fn_chance 键，键值为函数即可以给一代鬼侍二技能灭魂斩百分百秒杀处于流血状态为例-- 鬼侍模板内
-- 鬼侍近战攻击 2 是灭魂斩的秒杀，3 则是不秒杀的真伤
tt.melee.attacks[2].instakill_mod_type = MOD_TYPE_BLEED	-- 效果：流血类型的效果，键自己编一个就行
tt.melee.attacks[2].fn_chance = scripts.hero_oni.fn_chance_death_strike	-- 函数名自己编一个 -- game_scripts 模块内，最好和鬼侍更新函数与插入函数写在一个位置
function scripts.hero_oni.update(this, store)
... end function scripts.hero_oni.fn_chance_death_strike(this, store, a, target) return U.has_modifier_types(store, target, a.instakill_mod) or math.random() &lt; attack.chance -- 目标拥有流血类型效果时返回 true，表示百分百概率，or 后面是原始计算概率逻辑
end
<br>效果类型见 <a data-href="详细数据#三、效果类型" href="详细数据.html#三、效果类型" class="internal-link" target="_self" rel="noopener nofollow">详细数据 &gt; 三、效果类型</a>
Q：为什么 fn_chance 函数后面要加原始计算概率逻辑
A：这是因为计算概率时会判断攻击有没有 fn_chance 函数，有则用 fn_chance 函数，没有则用这个原始计算概率逻辑，两个不能同时存在，所以需要单独增加
特殊远程攻击就是近战时进行的远程攻击-- 某个可以远程攻击单位的更新函数内
...
if this.unit.is_stunned then	-- 处于眩晕状态原地待机 SU.soldier_idle(store, this)
else brk, sta = SU.y_soldier_melee_block_and_attacks(store, this)	-- 调用近战攻击函数 -- brk 就是跳出 break 缩写，sta 就是状态 status if brk or sta ~= A_NO_TARGET then	-- 近战攻击跳出，或近战攻击有目标，跳过远程攻击 -- block empty else	-- 近战攻击未跳出，无目标 brk, sta = SU.y_soldier_ranged_attacks(store, this)	-- 调用远程攻击函数 if brk then	-- 远程攻击跳出，跳过 -- block empty elseif SU.soldier_go_back_step(store, this) then	-- 正在返回集结点，跳过 -- block empty else	-- 远程攻击成功，脱战 SU.soldier_idle(store, this) SU.soldier_regen(store, this) end end
end ::label_43_0::	-- 标志，用于代码之间的跳转
coroutine.yield()
通过观察函数发现一般远程攻击和近战攻击一次只能触发一个，并且远程攻击优先级低于近战攻击，由此我们可以通过修改代码让远程和近战攻击同时都可以触发，来将远程攻击改为特殊远程攻击将以上代码修改为以下即可：...
if this.unit.is_stunned then SU.soldier_idle(store, this)
else if this.melee then brk, sta = SU.y_soldier_melee_block_and_attacks(store, this) if brk then	-- 近战攻击跳出 goto 挂起协程	-- 直接跳到挂起协程部分 end end if this.ranged then brk, sta = SU.y_soldier_ranged_attacks(store, this) if brk or sta == A_DONE then	-- 远程攻击跳出，或攻击完毕 goto 挂起协程 elseif sta == A_IN_COOLDOWN then	-- 远程攻击未跳出，并且在冷却 goto 脱战 end end if SU.soldier_go_back_step(store, this) then goto 挂起协程 end ::脱战::	--可以自己改个标志 SU.soldier_idle(store, this) SU.soldier_regen(store, this)
end ::挂起协程::
coroutine.yield()
主要目的：概率造成效果、概率暴击等在模板增加一个新攻击，复制要概率造成效果的攻击，增加效果和概率即可tt.melee.attacks[3] = table.deepclone(tt.melee.attacks[1])
tt.melee.attacks[3].chance = 0.33	-- 概率
tt.melee.attacks[3].mod = xxx	-- 效果
值得注意的是，原版一个攻击的多个不同动画也是这样实现的，所以有些攻击可能有两三个，看着是不同的攻击，实际就是相同的只不过动画不同
可以通过这个攻击是复制谁的和之后修改的键来判断tt.melee.attacks[2] = table.deepclone(tt.melee.attacks[1])
tt.melee.attacks[2].chance = 0.5
tt.melee.attacks[2].animation = "attack2" -- 近战攻击 2 就是近战攻击 1 的另一个动画
-- 如果此时想修改普通攻击，那么就需要增加两个攻击 3 和 4，并且要分别复制攻击 1 和 2
tt.melee.attacks[3] = table.deepclone(tt.melee.attacks[1])
...	-- 增加一些效果等
tt.melee.attacks[4] = table.deepclone(tt.melee.attacks[2])
...	-- 增加一些效果等
<br>需要重点关注攻击顺序对概率的影响，见 <a data-href="1.4 - 函数#攻击流程" href="第-1-章、基础/1.4-函数.html#攻击流程" class="internal-link" target="_self" rel="noopener nofollow">1.4 - 函数 &gt; 攻击流程</a>只有英雄以及能升级有升级函数的单位（例如召唤物）需要修改，其他单位不需要通过上面的修改升级函数，知道基础属性最后会赋值到对应属性键上，也就是说直接复制攻击是得不到基础属性的属性的
此时我们需要修改一下升级函数，让基础属性最后也会赋值到新攻击上，方法如下：以莉恩为例，增加了攻击 4 与攻击 5，都是概率让普通近战攻击造成效果，然后运行发现攻击 4 与攻击 5 没有伤害<br>
<img alt="Pasted image 20250708092738.png" src="site-lib/media/pasted-image-20250708092738.png" target="_self" style="width: 550px; max-width: 100%;">
如图攻击 2 为普通近战攻击的另一个动画赋值时给攻击 4 和 5 也赋值即可
Q：为什么可以通过增加另一个攻击来让一个攻击概率造成效果
<br>A：这是因为攻击顺序是概率低的优先，所以可行，具体见 <a data-href="1.4 - 函数#攻击流程" href="第-1-章、基础/1.4-函数.html#攻击流程" class="internal-link" target="_self" rel="noopener nofollow">1.4 - 函数 &gt; 攻击流程</a>
本质还是增加了一个新攻击，看似原攻击概率造成效果，实则不然，只是使新攻击复制（深拷贝）原攻击，给这个攻击增加了效果而已，也就是说复制后两个攻击之间其实已经没有什么关联了
主要目的：增加一个较为独立的技能以给尼鲁增加一个技能：每 275 秒增加 1 生命（升级二技能翠绿迸发解锁）为例-- 尼鲁模板内
tt.hero.skills.heal_live = E:clone_c("hero_skill")	-- 复制英雄技能组件，防御塔与其他单位技能组件是 power
tt.hero.skills.heal_live.cooldown = {	-- 增加基础属性：冷却时间 275,	-- 一级冷却时间 275 秒 245,	-- 三级冷却时间 245 秒 210 -- 三级冷却时间 210 秒
} tt.timed_attacks.list[5] = E:clone_c("custom_attack")	-- 复制自定义技能组件，尼鲁只有四个技能所以序号是 5
tt.timed_attacks.list[5].animation = "fairy_dust"	-- 动画套用四技能衰弱咒语，当然也可以套用其他技能，注意：只能用当前实体有的动画，否则将会报错
tt.timed_attacks.list[5].sound = "HeroNyruFairyDustCast"	-- 音效，也是借用衰弱咒语
tt.timed_attacks.list[5].cooldown = nil -- 默认冷却时间，因为基础属性已经有了所以不需要，其他键处理方法相同
tt.timed_attacks.list[5].disabled = true	-- 默认禁用 tt.timed_attacks.list[5].heal_live = 1 -- 增加生命数量 -- 尼鲁升级函数
s = this.hero.skills.verdant_blast	-- 目前不能做到增加 UI，但是可以先借用其他技能，当然你也可以直接根据等级来实现
sl = s.level if sl &gt; 0 and initial then ... local a = this.timed_attacks.list[5] a.cooldown = this.hero.skills.heal_live.cooldown[sl]	-- 根据翠绿迸发技能等级决定冷却时间，对应基础属性 a.disabled = nil	-- 解除禁用
end -- 尼鲁更新函数内
while true do ... if h.dead then SU.y_hero_death_and_respawn(store, this) end if this.unit.is_stunned then SU.soldier_idle(store, this) else a = this.timed_attacks.list[5] skill = this.hero.skills.heal_live if not a.disabled and store.tick_ts - a.ts &gt; a.cooldown then	-- 计算冷却时间 a.ts = store.tick_ts	-- 刷新时间戳 U.animation_start(this, a.animation, nil, store.tick_ts)	-- 播放动画 S:queue(a.sound)	-- 播放音效 store.lives = store.lives + a.heal_live	-- 增加生命，注：生命，金币都存在 store SU.y_hero_animation_wait(this)	-- 等待动画完成 end ... end ...
end
主要目的：使闪避或格挡时进行反击<br>流程见：<a data-href="1.4 - 函数#八、闪避流程" href="第-1-章、基础/1.4-函数.html#八、闪避流程" class="internal-link" target="_self" rel="noopener nofollow">1.4 - 函数 &gt; 八、闪避流程</a>通过查看流程知道：主要是通过 dodge.active 键来判断是否闪避 ，以及 dodge.counter_attack_pending 键来判断是否进行闪避攻击的所以我们可以在单位的更新函数判断闪避，然后将 dodge.counter_attack_pending 键的键值改为 true，在模板 dodge.counter_attack 键写上攻击即可-- 某个单位的更新函数内
while true do if h.dead then SU.y_hero_death_and_respawn(store, this) end if this.unit.is_stunned then SU.soldier_idle(store, this) else	-- 通常不会在死亡或眩晕时闪避 if this.dodge and this.dodge.active then	-- 判断闪避 this.dodge.active = false	-- 重置状态 this.dodge.counter_attack_pending = true ...	-- 注：后面可以增加其他逻辑 end end ...
end -- 模板内
tt.dodge.counter_attack = E:clone_c("melee_attack")
tt.dodge.counter_attack.animation = "attack"
tt.dodge.counter_attack.sound = "MeleeSword"	-- 动画和音效可以套用普通攻击的
...	-- 增加伤害类型，伤害这些，与攻击同理
与攻击相同，就不赘叙了，增加 tt.dodge.can_dodge = scripts.xxx.can_dodge 键，然后写函数即可函数与攻击写法相同但是会传递 store、调用这个函数的实体、远程攻击、攻击、攻击来源给 can_dodge上次在增加效果时我们说到：近战攻击不能增加多个效果通过上面的教程我们知道造成多个效果需要有效果表，最后还要遍历效果表
所以近战攻击不能造成多个效果的原因如下：造成效果时只造成单一的 mod 效果我们只需要将近战攻击函数的造成效果的代码块修改一下即可：首先找到近战攻击函数<br>
参考 <a data-href="1.4 - 函数#攻击流程" href="第-1-章、基础/1.4-函数.html#攻击流程" class="internal-link" target="_self" rel="noopener nofollow">1.4 - 函数 &gt; 攻击流程</a> 直接在 script_utils 搜索 y_soldier_melee_block_and_attacks 函数，即可找到近战攻击函数然后修改近战攻击函数 y_soldier_do_loopable_melee_attack，y_soldier_do_single_area_attack，y_soldier_do_single_melee_attack，多次攻击、范围攻击、单次攻击这三个函数可以直接搜索也可以直接转到定义
右键函数点击转到定义跳转到这个函数的定义<br>
<img alt="Pasted image 20250705131059.png" src="site-lib/media/pasted-image-20250705131059.png" target="_self" style="width: 600px; max-width: 100%;">往下找造成伤害的代码块<br>
<img alt="Pasted image 20250705131332.png" src="site-lib/media/pasted-image-20250705131332.png" target="_self" style="width: 525px; max-width: 100%;">
同上修改造成效果的代码块即可if attack.mod or attack.mods then local mods = attack.mods or { attack.mod } for _, mod_name in pairs(mods) do	-- 遍历效果表 local new_mod = E:create_entity(mod_name) new_mod.modifier.target_id = e.id new_mod.modifier.source_id = this.id new_mod.modifier.ts = store.tick_ts	-- 加上原有的避免兼容性问题 new_mod.modifier.level = attack.level queue_insert(store, new_mod) end
end -- 模板内直接把效果写在 mods 键上即可
tt.melee.attacks[1].mods = { 效果 1, 效果 2 ...
}
三个函数都改一遍即可]]></description><link>第-1-章、基础/1-修改教程/2-函数.html</link><guid isPermaLink="false">第 1 章、基础/1 - 修改教程/2 - 函数.md</guid><pubDate>Thu, 31 Jul 2025 07:14:21 GMT</pubDate><enclosure url="." length="0" type="false"/><content:encoded>&lt;figure&gt;&lt;img src="."&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[0.1 - 配置环境]]></title><description><![CDATA[游戏引擎版本：Lua_v5.1 + Love 2d_v10.2 + LuaJIT_v2.0.4（通过 print 版本信息得到）开始修改前建议先观看两门教程（至少需要两个小时） <a data-tooltip-position="top" aria-label="https://www.bilibili.com/video/BV1vf4y1L7Rb/" rel="noopener nofollow" class="external-link is-unresolved" href="https://www.bilibili.com/video/BV1vf4y1L7Rb/" target="_self">Lua教程-入门—哔哩哔哩</a> <br>
<a data-tooltip-position="top" aria-label="https://www.bilibili.com/video/BV1WR4y1E7ud/" rel="noopener nofollow" class="external-link is-unresolved" href="https://www.bilibili.com/video/BV1WR4y1E7ud/" target="_self">Lua教程-进阶—哔哩哔哩</a> <br><a class="auto-card-link-card is-unresolved" href="https://code.visualstudio.com/" target="_self"><div class="auto-card-link-main"><div class="auto-card-link-title"></div><div class="auto-card-link-description"></div><div class="auto-card-link-host"><span></span></div></div></a>Visual Studio Code - Code Editing. RedefinedVisual Studio Code redefines AI-powered coding with GitHub Copilot for building and debugging modern web and cloud applications. Visual Studio Code is free and available on your favorite platform - Linux, macOS, and Windows.code.visualstudio.com<img class="auto-card-link-thumbnail is-unresolved" src="https://code.visualstudio.com/opengraphimg/opengraph-home.png" draggable="false" target="_self">
将网盘的整合包下载并解压
<br><a class="auto-card-link-card is-unresolved" href="https://pan.baidu.com/s/1FNmzdCuilWbFg5sFR0AO5w?pwd=2333#list/path=%2F%E8%8B%B1%E9%9B%84%E8%A1%A5%E5%BC%BA%2F%E5%B7%A5%E5%85%B7" target="_self"><div class="auto-card-link-main"><div class="auto-card-link-title"></div><div class="auto-card-link-description"></div><div class="auto-card-link-host"><span></span></div></div></a>工具 -百度网盘百度网盘为您提供文件的网络备份、同步和分享服务。空间大、速度快、安全稳固，支持教育网加速，支持手机端。注册使用百度网盘即可享受免费存储空间pan.baidu.com<br><img alt="Pasted image 20250710100316.png" src="site-lib/media/pasted-image-20250710100316.png" target="_self" style="width: 347px; max-width: 100%;"><br>
解压工具见 <a data-href="0.2 - 工具#压缩软件" href="0.2-工具.html#压缩软件" class="internal-link" target="_self" rel="noopener nofollow">0.2 - 工具 &gt; 压缩软件</a>
将 VScode_KR_workspace 文件夹放到 D 盘
可以放到其他地方，但要保证没有中文路径，也可以重命名，请改一个便于找到的位置与名字<br>
<img alt="Pasted image 20250706200745.png" src="site-lib/media/pasted-image-20250706200745.png" target="_self" style="width: 395px; max-width: 100%;">
此文件夹包含配置文件、Love 2d 引擎，以及用于推荐插件与使用预先修改的设置 打开 VSCode → 安装所有建议的扩展
位于右下角<br>
<img alt="Pasted image 20250710092722.png" src="site-lib/media/pasted-image-20250710092722.png" target="_self" style="width: 525px; max-width: 100%;"> 包含 Lua 代码补全、诊断、格式化、用于调试的扩展
所有插件均配置完毕，无需自行配置 将要修改的游戏本体 exe 复制到工作区文件夹内的 src 文件夹内
将游戏本体解压到当前位置，注意不是直接解压，而是解压到当前位置 使用 VSCode 打开文件夹
双击工作区文件夹的 VScode_KR_workspace 文件即可<br>
<img alt="Pasted image 20250716131909.png" src="site-lib/media/pasted-image-20250716131909.png" target="_self" style="width: 325px; max-width: 100%;"> 设置与配置均已在 .vscode 内设置完毕，为了性能部分游戏资源文件已被排除（图片等）
参考资料：<br><a class="auto-card-link-card is-unresolved" href="https://www.cnblogs.com/linxiaoxu/p/17653162.html" target="_self"><div class="auto-card-link-main"><div class="auto-card-link-title"></div><div class="auto-card-link-description"></div><div class="auto-card-link-host"><span></span></div></div></a>[Love] VSCODE 调试 LOVE 引擎游戏 - 小能日记 - 博客园VSCODE调试LOVE引擎游戏 按 CTRL + SHIFT + P，打开 Preferences: Open User Settings (JSON)，为settings.json 添加如下代码<img class="auto-card-link-favicon is-unresolved" src="https://assets.cnblogs.com/favicon_v3_2.ico" target="_self">www.cnblogs.com
安装 Python
由于国内在官网下载较慢，所以提供镜像网站下载：
<br><a class="auto-card-link-card is-unresolved" href="https://mirrors.huaweicloud.com/python/3.13.5/python-3.13.5-amd64.exe" target="_self"><div class="auto-card-link-main"><div class="auto-card-link-title"></div><div class="auto-card-link-host"></div></div></a>python-3.13.5 - 华为云 打开 luajit-decompiler-v2/无错误弹窗反编译 浏览选择工作区文件夹的 src，进行反编译
可能会未响应几分钟，这是正常现象，耐心等待完成即可<br>
<img alt="Pasted image 20250727204353.png" src="site-lib/media/pasted-image-20250727204353.png" target="_self" style="width: 875px; max-width: 100%;"> 替换原文件
反编译后将 output 文件夹内的所有文件拖入 src 全部替换即可<br>
<img alt="Pasted image 20250727205026.png" src="site-lib/media/pasted-image-20250727205026.png" target="_self" style="width: 850px; max-width: 100%;"> 打开 src/version
将 build 键键值改为 "DEBUG"<br>
<img alt="Pasted image 20250706170225.png" src="site-lib/media/pasted-image-20250706170225.png" target="_self" style="width: 650px; max-width: 100%;"> 打一些断点
尽量打到会立刻执行的代码上，比如 kr/game_templates 内<br>
<img alt="Pasted image 20250618143505.png" src="site-lib/media/pasted-image-20250618143505.png" target="_self" style="width: 625px; max-width: 100%;">
运行游戏
Debug 为调试模式，Release 则为正常模式<br>
<img alt="Pasted image 20250706203549.png" src="site-lib/media/pasted-image-20250706203549.png" target="_self" style="width: 371px; max-width: 100%;">
一切正常下游戏会在断点处暂停，同时可以看到变量、堆栈<br>
<img alt="Pasted image 20250618143251.png" src="site-lib/media/pasted-image-20250618143251.png" target="_self" style="width: 725px; max-width: 100%;">完成后存档位置与原版独立，路径为 C:\Users\你的用户名称\AppData\Roaming\LOVE\kingdom_rush_xxx
也可以点击工作区文件夹内的存档位置快捷方式进行跳转
在 args 模块的 love.keypressed 函数内打个断点即可<br>
<img alt="Pasted image 20250707135331.png" src="site-lib/media/pasted-image-20250707135331.png" target="_self" style="width: 500px; max-width: 100%;">注意：只有触发断点时监视才可用<br><img alt="Pasted image 20250621105918.png" src="site-lib/media/pasted-image-20250621105918.png" target="_self" style="width: 450px; max-width: 100%;">
点击左上角金币图标，可以开启有 UI 的控制台（功能与快捷键相同）<br>
<img alt="Pasted image 20250620190901.png" src="site-lib/media/pasted-image-20250620190901.png" target="_self" style="width: 600px; max-width: 100%;">
调试控制台会显示详细信息，比如加载资源，所有点击事件，操作实体（插入，移除）等待补充...在运行过程中的打断点、删除、禁用断点、激活断点操作，只有断点后进行的才会立刻生效
否则不会立刻生效，需要到下次重新启动才会生效也就是说想在运行过程中打断点，必须在断点触发时才能打，否则不会立刻生效
（建议手动触发断点，然后打断点，或者提前打好断点然后禁用，需要使用时手动触发断点，然后启用）
取消 screen 与 custom 的注释
custom 输入要编辑的关卡的编号运行后即可进入关卡编辑器<br>
<img alt="Pasted image 20250712192159.png" src="site-lib/media/pasted-image-20250712192159.png" target="_self" style="width: 500px; max-width: 100%;">
注：关卡编辑器bug较多，仅用于修改路径与塔位，部分按钮可能会报错
关闭输入法即可检查 conf 模块关闭游戏自带控制台，将 console 键键值从 true 改为 false<br>
<img alt="Pasted image 20250618142239.png" src="site-lib/media/pasted-image-20250618142239.png" target="_self" style="width: 325px; max-width: 100%;">在 all/systems 搜索 main_script:on_update-- 将以下代码修改
if coroutine.status(s.co) == "dead" or error ~= nil then if error ~= nil then -- 修改为
if coroutine.status(s.co) == "dead" or (not success and error ~= nil) then if not success and error ~= nil then
<br><img alt="Pasted image 20250717091020.png" src="site-lib/media/pasted-image-20250717091020.png" target="_self" style="width: 975px; max-width: 100%;">将 main 模块的 ppref 设为空字符串即可<br>
<img alt="Pasted image 20250618161513.png" src="site-lib/media/pasted-image-20250618161513.png" target="_self" style="width: 600px; max-width: 100%;">在设置关闭诊断即可<br>
<img alt="Pasted image 20250728093403.png" src="site-lib/media/pasted-image-20250728093403.png" target="_self" style="width: 675px; max-width: 100%;">]]></description><link>0.1-配置环境.html</link><guid isPermaLink="false">0.1 - 配置环境.md</guid><pubDate>Thu, 31 Jul 2025 07:01:49 GMT</pubDate><enclosure url="https://code.visualstudio.com/opengraphimg/opengraph-home.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://code.visualstudio.com/opengraphimg/opengraph-home.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[注意事项]]></title><description><![CDATA[给一个变量赋值表，就是复制其引用（内存地址），除非显式（深拷贝）复制它
因为变量只相当于指针，所以无法通过直接通过修改变量来修改表
例如：a = {1 , 2 , 3}
a = {"a", "b", "c"}	-- 123 表不变，只是从引用 123 表改为引用 abc 表
可以在方括号内填写变量，或者数字、字符串
示例：table[1]、table["str"]、table[a] 仅能索引字符串
示例：table.str
Warning
注：如果 str 键不存在，尝试索引子键 x 会引发索引 nil 值错误
示例：table.str.x
因为表内不存在的键都是 nil ，nil 不是一个表所以不存在子键，无法索引
但是如果只是给不存在的 str 赋值，那么将会自动创建 str 键然后接收这个值
调用函数和定义函数时的冒号，其主要作用如下 调用时将冒号前的一个表隐式传递 调用时：E:register_t(模板, 组件) 等价于 E.register_t(E, 模板, 组件) 定义时隐式定义一个形式参数 self 定义时：function entity_db:register_t(name, base) 等价于 function entity_db.register_t(self, name, base) 综上使用冒号与点的区别仅在于隐式传递与隐式定义 self]]></description><link>第-1-章、基础/注意事项.html</link><guid isPermaLink="false">第 1 章、基础/注意事项.md</guid><pubDate>Thu, 31 Jul 2025 06:40:16 GMT</pubDate></item><item><title><![CDATA[发布与安装改版]]></title><description><![CDATA[发布时应该仅发布修改的模块<img alt="Pasted image 20250626193110.png" src="site-lib/media/pasted-image-20250626193110.png" target="_self" style="width: 235px; max-width: 100%;">all，krn，all-desktop，krn-desktop
其中 n 为游戏版本，例如：一代就是 1，五代就是 5<br>
<img alt="Pasted image 20250626193245.png" src="site-lib/media/pasted-image-20250626193245.png" target="_self">假设修改了 kr.game_templates 则将修改的 game_templates 放入以上文件夹内对应的文件夹（改版名.krn）<br>
<img alt="Pasted image 20250626193952.png" src="site-lib/media/pasted-image-20250626193952.png" target="_self" style="width: 409px; max-width: 100%;">将改版文件夹增加到压缩包打包（任意压缩软件即可），发布即可<br>压缩软件见 <a data-href="0.2 - 工具#压缩软件" href="0.2-工具.html#压缩软件" class="internal-link" target="_self" rel="noopener nofollow">0.2 - 工具 &gt; 压缩软件</a>找到游戏目录，然后打开游戏 exe 的压缩包<br><img alt="Pasted image 20250626200756.png" src="site-lib/media/pasted-image-20250626200756.png" target="_self" style="width: 650px; max-width: 100%;">]]></description><link>发布与安装改版.html</link><guid isPermaLink="false">发布与安装改版.md</guid><pubDate>Thu, 31 Jul 2025 06:16:40 GMT</pubDate><enclosure url="." length="0" type="false"/><content:encoded>&lt;figure&gt;&lt;img src="."&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[1.1 - 实体]]></title><description><![CDATA[使用模板（template）创建的单位、贴图、精灵等称为实体（entities）
其中单位特指英雄、士兵、敌人、防御塔实体创建流程见 <a data-href="1.4 - 函数#二、实体创建流程" href="第-1-章、基础/1.4-函数.html#二、实体创建流程" class="internal-link" target="_self" rel="noopener nofollow">1.4 - 函数 &gt; 二、实体创建流程</a>
最终模板参数用于函数等，传递过程： balance → 模板 → 实体 → 函数在&nbsp;all/entity_db（简称 E）返回的表中：
作用：创建各种实体，以及支持模板之间的深拷贝
默认为空，后面会通过 kr/game_templates 和 all/templates 模块动态增加模板
game_templates 创建模板时会读取 kr/balance/balance 内的数据 作用：为模板增加组件
默认为空，后面会通过 all/components 模块动态增加组件
组件与模板都是表，这里仅为了区分两个表E = { components = { }, -- 组件（如血量、技能） entities = { }, -- 实体模板（如英雄、敌人） -- ... 其他函数
}
tt = E:register_t(模板, 底模板) 作用：使模板派生于底模板生成新模板（拥有底模板的所有键值对），给模板增加 template_name 键，键值为模板名称
返回值：新模板的引用
原理：E.entities.模板 = table.deepclone(E.entities.底模板)
示例： tt = E:register_t("hero_gerald", "hero") -- tt 等价于 E:get_template("hero_gerald") 即 E.entities.hero_gerald
tt.health.hp = 666	-- 爵士模板血量改为 666
E:add_comps(模板, 组件， ...) 作用：向模板增加多个 components 中的组件
原理：E.entities.模板.组件 = table.deepclone(组件)
示例： E:add_comps("hero_gerald", "melee", "health")	-- 向爵士模板增加 melee 和 health 组件
E:get_template(模板) 原理：t = E.entities.模板
注意：需确保模板已存在（通过 E:register_t 创建）示例：E:get_template("hero_gerald").health.hp = 666	-- 爵士模板血量设置为 666
key = E:clone_c(组件) 作用：将对应键设置为对应组件，用于初始化
原理：key = table.deepclone(组件)
示例：tt.melee.attacks[1] = E:clone_c("aura_attack")	-- 给近战攻击 1 设置范围攻击组件 E:filter(表, 键, ...)	-- 可以传任意数量 作用：返回一个表，表内具有包含指定键的表
示例：T = E:filter(store.entities, "tower")	-- 此时 T 是一个表，内有所有包含 tower 键的实体（所有防御塔） for _, t in pairs(T) do	-- 遍历所有具有 tower 键的实体，使其攻击速度改为 1（将所有已建造的防御塔攻击速度改为 1 秒/次） t.attacks.list[1].cooldown = 1
end
E:filter_templates(键, ...)	-- 可以传任意数量 作用：返回一个表，表内具有包含指定键的模板
原理：E:filter(E.entities, ...)
示例：T = E:filter_templates("tower")	-- 此时 T 是一个表，内有所有具有 tower 键的模板（所有防御塔） for _, t in pairs(T) do	-- 遍历所有具有 tower 键的模板，使其降价 10（使所有防御塔价格降低 10 块） t.tower.price = t.tower.price - 10
end
]]></description><link>第-1-章、基础/1.1-实体.html</link><guid isPermaLink="false">第 1 章、基础/1.1 - 实体.md</guid><pubDate>Thu, 31 Jul 2025 06:16:21 GMT</pubDate></item><item><title><![CDATA[1.4 - 函数]]></title><description><![CDATA[所有基础函数都存储在 all/scripts 模块
后续会通过 kr/game_scripts 模块动态向 scripts 模块增加实体的各种函数
all/script_utils（简称 SU）用于存储实体各种行为的函数（如攻击等，技能则是直接写到实体的更新函数上）
all/utils（简称 U）用于存储通用工具函数（索敌等）
all/simulation 简称为 S
更新逻辑时间（store.tick_ts += 1）
处理实体插入与移除
调用各种更新函数 详情请在 all/systems（简称 sys）搜索 on_update 函数查看 所有实体最终都会创建到 all/game.store.entities 表中（game.store 简称 store）
调用 E:create_entity(模板) 函数： 深拷贝模板，生成独立实体表（存储实体的各种数据）
分配唯一 ID
返回该实体表引用 调用 S.queue_insert_entity 函数： 将实体表增加到 store.pending_inserts（待插入队列）中 通过驱动函数逐帧检测&nbsp;pending_inserts： 若队列非空，取出队列中实体表（移除队列中的引用）
调用&nbsp;S:insert_entity&nbsp;函数取出的实体表创建实体 调用各种插入函数同时传递参数：创建的实体 this、store 详情在 sys 搜索 on_insert 查看 若插入函数返回 false （通常表示创建失败）调用实体 dequeue 函数同时传递参数：this、store、true
以实体表唯一 ID 为键，实体表为键值以键值对形式&nbsp;[ID] = 实体表&nbsp;插入&nbsp;store.entities 正式创建实体 注：从创建实体表到创建实体从始至终都只是在操作引用，也就是同一实体表
调用 sys.main_script:on_update 函数调度协程： 遍历所有实体，使其中有更新函数的实体进行下一步
若实体函数没有运行过且实体更新函数没有协程，则创建更新函数的协程 创建后首次会调用一次更新函数 若实体的更新函数有协程则重启协程（一般从更新函数的 while 重启）
给实体更新函数传递四个参数：对应协程、对应实体（this）、store、实体函数表的引用 调用 S.queue_remove_entity 函数： 将实体表增加到 store.pending_removals（待移除队列）中 通过驱动函数逐帧检测&nbsp;pending_removals： 若队列非空，取出队列中实体表（移除队列中的引用）
调用&nbsp;S:remove_entity&nbsp;函数移除实体 调用各种移除函数同时传递参数：this、store
若移除函数返回 false （通常表示移除失败）调用实体 dequeue 函数同时传递参数：this、store、false
将对应 ID 实体移除（键值设定为 nil） 调用 E:create_entity("damage") 创建伤害实体表： 返回伤害实体表引用 此后可以通过这个引用直接修改创建的实体表（使用 ID 不好索引），比如增加目标等 调用 table.insert(store.damage_queue, 伤害) 函数： 将伤害插入 store.damage_queue 伤害队列 d = E:create_entity("damage")	-- 创建伤害实体
d.damage_type = DAMAGE_TRUE	-- 伤害类型设置为真伤，注意：修改的是创建的完全独立的伤害实体表 queue_damage(store, d)	-- 正式插入伤害，等价于 table.insert(store.damage_queue, d) 调用血量更新函数 sys.health:on_update： 若伤害队列非空，遍历伤害队列，使其中没有造成伤害的伤害，进行下一步
在 store 索引目标的 ID（target_id）
调用 U.predict_damage 函数计算伤害大小（计算护甲与伤害类型的影响）
造成伤害 与创建实体相同 判断实体有没有 modifier 键，如果没有则表示此实体不是效果，直接返回 true 筛选出所有具有相同目标的效果 判断当前效果有没有被其他相同目标的效果抵消掉，如果被抵消直接返回 false 判断当前效果的 modifier.remove_banned 键的键值，若为 true 则移除被抵消的其他相同目标的效果 移除后 modifier.removed_by_ban 键改为 true 判断 modifier.allows_duplicates 键的键值是否允许叠加多个相同等级的相同效果 判断 modifier.replaces_lower 键的键值是否仅替换不同等级的相同效果 判断 modifier.resets_same 键的键值是否仅重置相同等级的相同效果的持续时间，返回 false 完毕后返回 true 调用 U.attack_order 函数排序攻击： 遍历实体的攻击表（melee.attacks 或 ranged.attacks）
根据以下条件排序攻击表
返回到实体 melee.order 或 ranged.order 表（攻击优先级） 都不相等时优先考虑根据概率排序
melee.order 或 ranged.order 默认值只有攻击 1，所以若没有排序则只能使用普通攻击 调用 SU.y_soldier_melee_block_and_attacks 近战攻击函数： 调用 SU.soldier_pick_melee_target 函数寻找拦截范围内的目标： 返回目标 无目标返回 A_NO_TARGET
调用 SU.soldier_pick_melee_attack 函数遍历实体的 melee.order 表： 优先使用闪避攻击
按排序顺序判断攻击是否可用：没有禁用、冷却完毕、标签没有被过滤、fn_can 函数返回 true、计算概率或调用 fn_chance 函数计算概率，返回可用攻击 fn_can 函数会传递：调用这个函数的实体、store、攻击、目标
fn_chance 函数传递内容同上 无可用攻击返回 A_IN_COOLDOWN
判断攻击类型：单体攻击、多次攻击、近战范围攻击，调用对应攻击类型的函数 攻击函数就是最基础的造成伤害与造成效果、播放动画、处理共享冷却等，不进行赘叙 单体攻击调用 SU.unit_dodges 函数判断目标是否闪避此次攻击
攻击完毕返回 A_DONE 注意步骤内的缩进，返回值是上一层级的函数返回
调用 SU.soldier_pick_ranged_target_and_attack 函数： 寻找攻击范围内的目标
遍历实体的 ranged.order 表（排序在前的优先）
判断攻击是否可用：没有禁用、冷却完毕、标签没有被过滤、没有被筛选函数 filter_fn 过滤 传递的参数同索敌的筛选函数（v，origin，实体表与圆心位置） 同时返回目标和可用攻击
无目标返回 A_NO_TARGET
无可用攻击返回 A_IN_COOLDOWN 判断攻击类型：单体攻击、多次攻击，调用对应攻击类型的函数
创建子弹实体
攻击完毕返回 A_DONE 调用子弹的更新函数： 计算子弹飞行轨迹，抛物线（箭矢），直线追踪（魔法弹）等
造成伤害与造成效果 判断目标有没有闪避此次攻击（是否可用）：没有被眩晕、冷却完毕、攻击的伤害类型没有 DAMAGE_NO_DODGE、计算概率、can_dodge 函数返回 true can_dodge 函数会传递：store、调用这个函数的实体、远程攻击、攻击、攻击来源 可用返回 true，不可用 false
目标的 dodge.active 键的键值设为 true 判断 dodge.counter_attack_pending 是否进行闪避攻击
是则 soldier_pick_melee_attack 函数返回 dodge.counter_attack 的攻击
dodge.counter_attack_pending 键的键值改为 false
注：是否进行闪避是攻击者在判断，而不是目标
攻击者 → 目标，目标闪避攻击 → 攻击者死亡（1） → 被控制（2） → 闪避（3） → 更换集结点（4） → 特殊待机（5） → 技能（6） → 特殊远程攻击（7） → 近战攻击（8） → 远程攻击 (9) → 返回集结点 (10) → 待机 (11) → 脱战回血 (12)注：
闪避优先级较高，如果有闪避动画，则会打断低优先级行为
实现逻辑就是简单的判断，详见 all/scripts.soldier_barrack.update 函数
参考资料：<a class="auto-card-link-card is-unresolved" href="https://tieba.baidu.com/p/9764441850" target="_self"><div class="auto-card-link-main"><div class="auto-card-link-title"></div><div class="auto-card-link-description"></div><div class="auto-card-link-host"></div></div></a>关于士兵是如何攻击的讨论 by天玑布可 -百度贴吧事情是这样的，因为今天lz很闲，偶然看到一个吧友问和刺客秒杀相关的事情，然后就真的写了很多东西和数学计算，结果最后翻开底层代码仔细看了一下发现全错!) 所以单独开一个贴，写一下士兵究竟是怎么一个攻击逻辑。也望各位引以为戒，对斩钉截铁说出的话要进行查证]]></description><link>第-1-章、基础/1.4-函数.html</link><guid isPermaLink="false">第 1 章、基础/1.4 - 函数.md</guid><pubDate>Thu, 31 Jul 2025 06:03:36 GMT</pubDate></item><item><title><![CDATA[index]]></title><description><![CDATA[该文档仅限学习交流，禁止用于商业用途请购买正版游戏后再进行修改。若修改盗版出现任何问题，均与作者以及文档无关<a data-tooltip-position="top" aria-label="https://github.com/MC123ACD/KR_modCourse" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/MC123ACD/KR_modCourse" target="_self">Github</a> 本文档适用于电脑版的一、二、三、五代，请注意版本（安卓版部分可用）
由于本人正处于学习阶段，所以错误在所难免，欢迎提出意见、提 requests鉴于网上对这个游戏的修改教程过于分散以及不系统，特地写此文档开始之前为了阅读体验建议先安装网盘修改教程的所有字体如果嫌网页加载慢可以直接用 obsidian 软件在本地打开 md 源文件（想编辑文档也可以看一下教程）：
下载安装
<br><a class="auto-card-link-card is-unresolved" href="https://thoughts.teambition.com/share/62a131711a6baa00416a79d3#title=Obsidian_%E5%AE%89%E8%A3%85%E5%8C%85" target="_self"><div class="auto-card-link-main"><div class="auto-card-link-title"></div><div class="auto-card-link-description"></div><div class="auto-card-link-host"><span></span></div></div></a>Obsidian 安装包官网：https://obsidian.md/<img class="auto-card-link-favicon is-unresolved" src="https://g.alicdn.com/thoughts/thoughts-front/server/favicon.7d745459.png" target="_self">thoughts.teambition.com 下载 md 源文件 打开教程的文件夹 使用阅读模式
点击右下角铅笔，使用阅读模式<br>
<img alt="Pasted image 20250704153432.png" src="site-lib/media/pasted-image-20250704153432.png" target="_self" style="width: 293px; max-width: 100%;">
若想编辑则选择实时阅览模式
]]></description><link>index.html</link><guid isPermaLink="false">index.md</guid><pubDate>Thu, 31 Jul 2025 02:41:07 GMT</pubDate><enclosure url="https://g.alicdn.com/thoughts/thoughts-front/server/favicon.7d745459.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://g.alicdn.com/thoughts/thoughts-front/server/favicon.7d745459.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[1.3 - 常量]]></title><description><![CDATA[all/constants 内的所有变量名义上称为 “常量”（constants）虽叫常量，实际为可修改的变量，但禁止直接修改（破坏位运算逻辑）具体常量总结见<a data-href="详细数据#(二) 常量" href="详细数据.html#(二) 常量" class="internal-link" target="_self" rel="noopener nofollow">详细数据 &gt; (二) 常量</a>建议使用 win 自带的计算器的程序员模式输入十进制然后选择按位来计算结果，看二进制效率较低]]></description><link>第-1-章、基础/1.3-常量.html</link><guid isPermaLink="false">第 1 章、基础/1.3 - 常量.md</guid><pubDate>Wed, 30 Jul 2025 06:46:37 GMT</pubDate><enclosure url="." length="0" type="false"/><content:encoded>&lt;figure&gt;&lt;img src="."&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[1.5 - 存档]]></title><description><![CDATA[存档用于存储各种英雄等级，加点，完成的成就、星星以及升级、关卡完成情况等存档位置：C:\Users\你的用户名\AppData\Roaming\kingdom_rush_xxx
使用 VSCode 调试则在 C:\Users\你的用户名称\AppData\Roaming\LOVE\kingdom_rush_xxx 里面
也可以点击工作区文件夹内的存档位置快捷方式进行跳转
存档内就是一些简单的表，不进行赘叙slot = storage:load_slot()	-- slot 就是存档的表了
storage:save_slot(slot)
保存前必须要先读取存档
因为这个函数会将存档直接完全替换为保存的表，所以刚开始必须先读取存档，否则存档会丢失此前保存的内容，仅有保存的内容示例：slot = storage:load_slot()	-- slot 接收存档的表，如果你要修改存档必须首先加载存档 slot.heroes.status.hero_gerald.xp = 2333	-- 将爵士的经验设置为 2333 点 storage:save_slot(slot) -- 保存到存档里
]]></description><link>第-1-章、基础/1.5-存档.html</link><guid isPermaLink="false">第 1 章、基础/1.5 - 存档.md</guid><pubDate>Wed, 30 Jul 2025 06:46:04 GMT</pubDate></item><item><title><![CDATA[程序运行逻辑]]></title><description><![CDATA[深拷贝模板，分配唯一ID读取插入函数模板每帧调用 game:updatebalanceE:register_t 创建模板每帧调用 director:update每帧调用 love.update调用 E:create_entity调用 E:load每帧调用 S:do_tick实体表store.entities待插入队列重启协程，没有则创建实体正式创建调用血量更新函数伤害队列实体表完全独立每帧调用 S:update]]></description><link>第-1-章、基础/程序运行逻辑.html</link><guid isPermaLink="false">第 1 章、基础/程序运行逻辑.canvas</guid><pubDate>Wed, 30 Jul 2025 01:56:33 GMT</pubDate></item><item><title><![CDATA[1.2 - 错误]]></title><description><![CDATA[以<a data-tooltip-position="top" aria-label="注意事项 > 表的索引" data-href="注意事项#表的索引" href="第-1-章、基础/注意事项.html#表的索引" class="internal-link" target="_self" rel="noopener nofollow">索引空值错误</a>为例E:get_template("hero_gerald").error.n = "error"
<br><img alt="Pasted image 20250624161626.png" src="site-lib/media/pasted-image-20250624161626.png" target="_self" style="width: 500px; max-width: 100%;">
第一行：错误文件、行号、以及错误信息
Traceback：报错前执行的代码与调用的函数
attempt to index a nil value → 尝试索引不存在的键（melee 组件无 error 字段）
控制台报错常见于实体逻辑错误，实体卡死（无法攻击/移动）<br>
<img alt="Pasted image 20250625102924.png" src="site-lib/media/pasted-image-20250625102924.png" target="_self" style="width: 141px; max-width: 100%;">还是以索引空值错误为例function scripts.hero_alleria.update(this, store) this.error.n = "error"
...
<br><img alt="Pasted image 20250625103109.png" src="site-lib/media/pasted-image-20250625103109.png" target="_self" style="width: 1175px; max-width: 100%;"> 第一行：协程错误，错误文件与行号，以及错误信息
Traceback：显示错误前的调用链（有可能什么都没有）
attempt to index field 'error' (a nil value) → 尝试索引不存在的键
]]></description><link>第-1-章、基础/1.2-错误.html</link><guid isPermaLink="false">第 1 章、基础/1.2 - 错误.md</guid><pubDate>Tue, 29 Jul 2025 08:07:17 GMT</pubDate><enclosure url="." length="0" type="false"/><content:encoded>&lt;figure&gt;&lt;img src="."&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[0.2 - 工具]]></title><description><![CDATA[如有任何疑问，强烈建议先问一下 AI，然后再向他人寻求帮助。<a class="auto-card-link-card is-unresolved" href="https://www.deepseek.com/" target="_self"><div class="auto-card-link-main"><div class="auto-card-link-title"></div><div class="auto-card-link-description"></div><div class="auto-card-link-host"><span></span></div></div></a>DeepSeek | 深度求索我是 DeepSeek，很高兴见到你！我可以帮你写代码、读文件、写作各种创意内容，请把你的任务交给我吧~<img class="auto-card-link-favicon is-unresolved" src="https://www.deepseek.com/favicon.ico" target="_self">www.deepseek.com<img class="auto-card-link-thumbnail is-unresolved" src="https://chat.deepseek.com/deepseek-chat.jpeg" draggable="false" target="_self"><br><a class="auto-card-link-card is-unresolved" href="https://www.7-zip.org/" target="_self"><div class="auto-card-link-main"><div class="auto-card-link-title"></div><div class="auto-card-link-host"><span></span></div></div></a>7-Zipwww.7-zip.org<img class="auto-card-link-thumbnail is-unresolved" src="https://www.7-zip.org/7ziplogo.png" draggable="false" target="_self">
将需要反编译的 lua 文件拖入 luajit-decompiler.exe
文件夹可以使用 python 程序反编译<br>
<img alt="Pasted image 20250707141931.png" src="site-lib/media/pasted-image-20250707141931.png" target="_self" style="width: 625px; max-width: 100%;">
在 output 文件夹找到反编译后的 lua 文件，用其替换掉 src 内的文件<br>
<img alt="Pasted image 20250707144234.png" src="site-lib/media/pasted-image-20250707144234.png" target="_self" style="width: 700px; max-width: 100%;"> 这个窗口表示该文件不是 lua 文件或已反编译，点击继续就行<br>
<img alt="Pasted image 20250616103143.png" src="site-lib/media/pasted-image-20250616103143.png" target="_self" style="width: 368px; max-width: 100%;"> 这个窗口表示 output 文件夹已有这个文件，自行决定是否替换<br>
<img alt="Pasted image 20250625162357.png" src="site-lib/media/pasted-image-20250625162357.png" target="_self" style="width: 405px; max-width: 100%;"> ]]></description><link>0.2-工具.html</link><guid isPermaLink="false">0.2 - 工具.md</guid><pubDate>Tue, 29 Jul 2025 07:37:59 GMT</pubDate><enclosure url="https://www.deepseek.com/favicon.ico" length="0" type="image/x-icon"/><content:encoded>&lt;figure&gt;&lt;img src="https://www.deepseek.com/favicon.ico"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[详细数据]]></title><description><![CDATA[这篇用来总结常用数据更详细的数据请查阅 @杨叔伟大无需多言 的文档：<a class="auto-card-link-card is-unresolved" href="https://www.bilibili.com/read/readlist/rl141527" target="_self"><div class="auto-card-link-main"><div class="auto-card-link-title"></div><div class="auto-card-link-description"></div><div class="auto-card-link-host"><span></span></div></div></a>《王国保卫战》Kingdom Rush 中文百科全集《王国保卫战》百科系列，含有全代防御塔，英雄，敌人，天赋系统，关卡场景，关卡出怪列表等内容的详细数据及作者的解说。<img class="auto-card-link-favicon is-unresolved" src="https://www.bilibili.com/favicon.ico" target="_self">www.bilibili.com<img class="auto-card-link-thumbnail is-unresolved" src="https://i1.hdslb.com/bfs/article/9f3790a8bc417f97ecf26770bb67d305248602469.jpg@234w_176h_1c.webp" draggable="false" target="_self">ps：注意分辨直径与半径，文档为直径，代码为半径看二进制效率较低，所以直接写 1 所在的位数，例如 1000 则位数为 4仅总结常用的，其他自行见 constants几乎所有索敌本质都是在一定范围索敌
也就是说基本所有索敌都是在范围索敌的基础上增加一些代码而来的（图片是游戏自带调试模式的功能，快捷键 b）<br>
<img alt="Pasted image 20250705124548.png" src="site-lib/media/pasted-image-20250705124548.png" target="_self" style="width: 361px; max-width: 100%;">过滤函数 用于筛选目标，筛选出过滤函数返回 true 的实体，false 表示无视这个实体最小范围内标签 用于判断目标标签有没有设定的标签，如果有则无最小范围限制是否仅上游 用于指定是否只筛选位于当前节点的上游（即更靠近路径起点）或下游（即更靠近路径终点）的敌人<br>效果类型见 <a data-href="详细数据#三、效果类型" href="详细数据.html#三、效果类型_0" class="internal-link" target="_self" rel="noopener nofollow">详细数据 &gt; 三、效果类型</a>表的形式：{ "mod_lava",	--效果模板名称 ...
}
通常用于索敌的过滤函数
当然也可以用于技能，对具有特定效果的敌人造成额外效果，典型代表是三代莉恩，对有诅咒效果的敌人造成额外伤害]]></description><link>详细数据.html</link><guid isPermaLink="false">详细数据.md</guid><pubDate>Mon, 28 Jul 2025 03:23:23 GMT</pubDate><enclosure url="https://www.bilibili.com/favicon.ico" length="0" type="image/x-icon"/><content:encoded>&lt;figure&gt;&lt;img src="https://www.bilibili.com/favicon.ico"&gt;&lt;/figure&gt;</content:encoded></item></channel></rss>